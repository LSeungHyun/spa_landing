---
description:
globs:
alwaysApply: false
---
# 🚀 Git Workflow Optimization Rules

## 🎯 Purpose
Provide an efficient and streamlined workflow when users request git commits, eliminating unnecessary waiting time and PowerShell compatibility issues.

## ✅ Standard Git Commit Workflow (Required)

When users request git commits, **ALWAYS** execute in this exact order:

### 1. Stage Files
```bash
git add [filename]
# or
git add .
```

### 2. Create Commit
```bash
git commit -m "[commit message]"
```

### 3. Status Check (Only if necessary)
```bash
git status
```

## 📝 PowerShell-Compatible Commit Message Rules (Required)

### ✅ Safe Commit Message Format
- **Length Limit**: Recommended 50 characters, maximum 72 characters
- **Language**: English preferred for compatibility
- **Special Characters**: Avoid quotes, backslashes, pipes, and other PowerShell special characters
- **Line Breaks**: Use single-line messages only

### 📋 Recommended Commit Message Patterns
```bash
# ✅ Good Examples
git commit -m "feat: add user authentication"
git commit -m "fix: resolve login validation error"
git commit -m "refactor: improve code structure"
git commit -m "docs: update README"
git commit -m "style: format code and fix linting"
git commit -m "test: add unit tests for auth module"

# ❌ Avoid These (PowerShell Error Risk)
git commit -m "feat: add user auth - implement login/logout - improve session mgmt"
git commit -m "fix: resolve 'user' validation error with special chars"
```

### 🔧 Commit Message Generation Strategy
1. **Keep it Simple**: Write concise messages in English
2. **Use Type Prefixes**: `feat:`, `fix:`, `refactor:`, `docs:`, `style:`, `test:`, `chore:`
3. **Detailed Descriptions**: Use separate issues or PR descriptions when needed
4. **PowerShell Testing**: Validate complex messages beforehand

## ⛔ Prohibited Actions (Required)

### Commands to NEVER Execute Automatically
- `git log --oneline`
- `git log --oneline -n`
- `git show`
- `git diff --cached`
- Any other git commands that use pagers

### 🚨 Reasons
- These commands use the `less` pager and stop at `:` prompt
- Requires manual user intervention to press `q` to exit
- Causes workflow inefficiency and user frustration

## 🔍 Exception Cases (Optional)

Additional git commands are allowed ONLY in these cases:

### 1. Explicit User Request
- "Show me git log"
- "Check commit history"
- "Show recent changes"

### 2. Error Debugging
- When commit fails and need to investigate
- When resolving conflicts and checking status

### 3. Using No-Pager Option
```bash
git --no-pager log --oneline -3
```

## 🛡️ Safety Mechanisms

### Error Handling Strategy
1. **First Attempt Fails**: Retry with simpler English message
2. **Second Attempt Fails**: Use most basic message format
3. **Persistent Failures**: Request manual commit from user

### Fallback Messages
```bash
git commit -m "update files"
git commit -m "fix issues"
git commit -m "add features"
git commit -m "refactor code"
git commit -m "improve functionality"
```

## 📊 Success Metrics

- ✅ Eliminate pager waiting time
- ✅ 100% PowerShell compatibility
- ✅ Minimize commit failure rate
- ✅ Improve workflow efficiency

## 🔄 Workflow Example

```bash
# User requests: "Commit all changes with message about MCP setup"

# Step 1: Stage files
git add .

# Step 2: Commit with optimized message
git commit -m "feat: configure Supabase MCP integration"

# Step 3: Confirm completion (optional)
git status

# ✅ DONE - No pager commands, no waiting
```

## 🚫 Anti-Patterns to Avoid

### ❌ Don't Do This:
```bash
git add .
git status          # Unnecessary step
git log --oneline   # Causes pager wait
git commit -m "very long message with 'quotes' and special chars that might break PowerShell"
git show           # Another pager command
```

### ✅ Do This Instead:
```bash
git add .
git commit -m "feat: add new feature"
# Done!
```

---

## 📚 Additional Notes

- This rule is optimized for Windows PowerShell environment
- Some restrictions may differ in other shell environments
- Always prioritize user experience and workflow efficiency
- When in doubt, use the simplest approach that works
