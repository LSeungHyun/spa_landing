---
description:
globs:
alwaysApply: false
---
# 🌐 언어 사용 규칙 (Language Usage Rules)

**기본 언어**: 한국어
- 모든 답변과 설명은 한국어로 제공
- 코드 주석과 변수명은 영어 사용 (개발 표준)
- 기술 문서는 한국어 우선, 필요시 영어 병기

---

<!-- ruleType: always -->

# 🚀 SPA 플랫폼 Supabase MCP 활용 가이드라인

이 룰은 SPA(논문 초록/서론 자동 생성기) 플랫폼 프로젝트에서 Supabase 관련 작업 시 MCP(Model Context Protocol)를 우선적으로 활용하도록 안내합니다.

## 🎯 **기본 원칙**

- **Supabase 관련 모든 작업은 MCP 도구를 우선 사용**
- 수동 SQL 작성보다는 MCP를 통한 스키마 조회 및 관리 선호
- 데이터베이스 변경사항은 항상 마이그레이션을 통해 추적

## 📊 **조직 정보**

- **주요 조직**: `leda games` (ID: `tykqwanfmgtwojyyvdrj`)
- **테스트 조직**: `TEST1` (ID: `xakqzepnrmmzmfxdtloa`)
- **프로젝트**: SPA 플랫폼 관련 프로젝트들

## 🔧 **MCP 도구 활용 우선순위**

### ✅ **데이터베이스 스키마 작업**
```typescript
// ❌ 수동으로 스키마 정보 추측하지 말고
const userTable = {
  id: 'uuid',
  email: 'text',
  // ... 추측된 필드들
};

// ✅ MCP를 통해 실제 스키마 조회
// "SPA 플랫폼 프로젝트의 테이블 목록을 보여줘"
// "users 테이블의 스키마를 확인해줘"
```

### ✅ **데이터 조회 및 분석**
```typescript
// ❌ 하드코딩된 쿼리 작성하지 말고
const query = `SELECT * FROM users WHERE created_at > '2024-01-01'`;

// ✅ MCP를 통해 실제 데이터 조회
// "최근 가입한 사용자 목록을 보여줘"
// "이메일 구독자 통계를 확인해줘"
```

## 🏗️ **SPA 플랫폼 데이터 모델**

### 📧 **이메일 수집 관련**
```sql
-- email_subscriptions 테이블 예시
CREATE TABLE email_subscriptions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  source TEXT, -- 'landing_page', 'template_download' 등
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  status TEXT DEFAULT 'active' -- 'active', 'unsubscribed'
);
```

### 📄 **템플릿 관리**
```sql
-- paper_templates 테이블 예시
CREATE TABLE paper_templates (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  category TEXT, -- 'abstract', 'introduction', 'research_question'
  template_content JSONB,
  usage_count INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### 👤 **사용자 관리**
```sql
-- academic_users 테이블 예시 (Supabase Auth 확장)
CREATE TABLE academic_users (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  email TEXT,
  research_field TEXT,
  institution TEXT,
  subscription_tier TEXT DEFAULT 'free',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

## 🔄 **일반적인 MCP 워크플로우**

### 1️⃣ **스키마 확인**
```bash
# MCP 명령어 예시
"현재 프로젝트의 테이블 목록을 보여줘"
"email_subscriptions 테이블의 구조를 확인해줘"
```

### 2️⃣ **데이터 조회**
```bash
# MCP 명령어 예시
"최근 7일간 이메일 구독자 수를 확인해줘"
"가장 많이 사용된 템플릿 TOP 5를 보여줘"
```

### 3️⃣ **마이그레이션 생성**
```bash
# MCP 명령어 예시
"새로운 템플릿 카테고리 필드를 추가하는 마이그레이션을 만들어줘"
"이메일 구독자 테이블에 인덱스를 추가해줘"
```

## 🚀 **개발 시나리오별 MCP 활용**

### 📊 **랜딩페이지 개발**
- 이메일 수집 폼 구현 시: MCP로 email_subscriptions 테이블 스키마 확인
- 구독자 통계 표시: MCP로 실시간 데이터 조회
- A/B 테스트 데이터: MCP로 conversion rate 분석

### 🤖 **AI 템플릿 기능**
- 템플릿 사용량 추적: MCP로 usage_count 업데이트
- 사용자 피드백 저장: MCP로 feedback 테이블 관리
- 템플릿 성능 분석: MCP로 효과성 지표 조회

### 🔐 **인증 및 사용자 관리**
- 사용자 프로필 확장: MCP로 academic_users 테이블 관리
- 구독 티어 관리: MCP로 subscription 상태 확인
- 사용 제한 체크: MCP로 API 호출 횟수 추적

## ⚠️ **주의사항**

### ❌ **피해야 할 패턴**
```typescript
// 수동 SQL 작성
const result = await supabase
  .from('users')
  .select('*')
  .gte('created_at', '2024-01-01');

// 하드코딩된 스키마 가정
interface User {
  id: string;
  email: string; // 실제 필드명이 다를 수 있음
}
```

### ✅ **권장 패턴**
```typescript
// MCP를 통한 스키마 확인 후 작업
// 1. "users 테이블 스키마를 확인해줘"
// 2. 실제 필드명과 타입 확인
// 3. 타입 안전한 코드 작성

// MCP 조회 결과를 바탕으로 한 정확한 인터페이스
interface User {
  id: uuid;
  email: text;
  created_at: timestamptz;
  // ... 실제 스키마 기반
}
```

## 🎯 **성능 최적화**

### 📈 **인덱스 관리**
- MCP로 쿼리 성능 분석
- 자주 조회되는 필드에 인덱스 추가
- 복합 인덱스 최적화

### 🔄 **RLS (Row Level Security)**
- MCP로 정책 확인 및 테스트
- 사용자별 데이터 접근 제어
- 성능 영향 최소화

## 📝 **문서화**

모든 MCP 기반 작업은 다음과 같이 문서화:

```markdown
## 데이터베이스 변경사항

### 변경 일시: 2024-01-15
### MCP 명령어: "email_subscriptions 테이블에 source 필드 추가"
### 마이그레이션 파일: 003_add_source_to_email_subscriptions.sql
### 영향 범위: 랜딩페이지 이메일 수집 기능
```

## 🔍 **디버깅 및 트러블슈팅**

### 🐛 **일반적인 문제**
1. **스키마 불일치**: MCP로 최신 스키마 재확인
2. **권한 문제**: MCP로 RLS 정책 점검
3. **성능 이슈**: MCP로 쿼리 실행 계획 분석

### 🛠️ **해결 방법**
- MCP 명령어로 실시간 상태 확인
- 로그 분석을 통한 근본 원인 파악
- 단계별 검증을 통한 문제 격리

---

**💡 핵심 메시지**: SPA 플랫폼 개발 시 Supabase 관련 모든 작업은 MCP를 우선 활용하여 정확성과 효율성을 극대화하세요!
