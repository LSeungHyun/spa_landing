---
description: 
globs: 
alwaysApply: false
---
<!-- ruleType: always -->

# 🌐 언어 사용 규칙 (Language Usage Rules)

**기본 언어**: 한국어
- 모든 답변과 설명은 한국어로 제공
- 코드 주석과 변수명은 영어 사용 (개발 표준)
- 기술 문서는 한국어 우선, 필요시 영어 병기

---

# 🚀 SPA (논문 초록/서론 자동 생성기) 플랫폼 개발 가이드라인

You are an expert in building a production-grade, resilient, secure, and scalable SPA (논문 초록/서론 자동 생성기) platform using Next.js (App Router), Supabase (Auth + RLS), TanStack Query, and modern UI libraries (Shadcn UI, Radix UI, Framer Motion). You optimize for server-first rendering, concurrency control, DevOps, AI integration, and developer ergonomics.

## ⚙️ Rendering Architecture

- Prefer **React Server Components (RSC)**. Use `use client` only for:
  - TanStack Query usage
  - Browser APIs like `window`, `document`
  - Hooks such as `useSession`, `useFormContext`
- In SSR, use `getServerSession` from NextAuth.
- Middleware handles session injection (`auth`, `refresh`, etc.).
- Client hydration fallback via `<Suspense />` or skeleton UIs.

## 📁 File Structure Convention

```
spa-platform/
├── src/
│   ├── app/                     # Next.js App Router (pages, route handlers 등)
│   │   └── ...                  # (기존 /app 구조 유지)
│   │
│   ├── components/              # 전역 공통 UI 컴포넌트
│   │   ├── ui/                  # shadcn-ui, Radix 등 범용 "아토믹" 컴포넌트
│   │   ├── layout/              # 전역 레이아웃, 헤더/푸터
│   │   ├── common/              # 범용 공통 컴포넌트 (Spinner, PageTitle 등)
│   │   └── README.md
│   │
│   ├── features/                # 도메인(기능)별 모듈
│   │   ├── auth/
│   │   │   ├── components/      # 인증 전용 UI
│   │   │   ├── hooks/           # 인증 전용 훅
│   │   │   ├── services/        # 인증 로직
│   │   │   └── types.ts
│   │   ├── templates/
│   │   │   ├── api.ts           # 템플릿 API 호출
│   │   │   ├── components/      # 템플릿 생성, 편집 UI
│   │   │   ├── hooks/
│   │   │   ├── services/
│   │   │   └── types.ts
│   │   ├── landing/
│   │   │   ├── components/
│   │   │   ├── hooks/
│   │   │   ├── services/
│   │   │   └── types.ts
│   │   ├── analytics/
│   │   │   ├── components/
│   │   │   ├── hooks/
│   │   │   ├── services/
│   │   │   └── types.ts
│   │   └── README.md
│   │
│   ├── hooks/                   # 전역(범용) 훅
│   │   └── ...
│   │
│   ├── lib/                     # 공통 유틸리티, 전역 상태, API 클라이언트 등
│   │   ├── api/                 # axios 인스턴스, endpoints
│   │   ├── constants/           # 전역 상수
│   │   ├── auth/                # TanStack Query 기반 인증 관리
│   │   └── utils/               # 범용 함수(포매팅 등)
│   │
│   ├── services/                # 여러 도메인에서 공유되는 로직
│   │   ├── email.service.ts
│   │   ├── template.service.ts
│   │   └── ...
│   │
│   ├── types/                   # 전역 타입
│   │   ├── api.types.ts
│   │   └── ...
│   │
│   ├── styles/                  # 전역 스타일 (Tailwind, CSS 등)
│   │   └── globals.css
│   │
│   └── config/                  # 앱 설정
│       ├── routes.ts
│       └── settings.ts
│
├── supabase/
│   └── migrations/              # DB 마이그레이션
│
├── public/                      # 정적 파일 (이미지, 폰트 등)
│   └── ...
├── .env
├── package.json
└── (기타 설정)
```

## 📚 Library Stack

Use following libraries for specific functionalities:

1. `date-fns`: For efficient date and time handling.
2. `ts-pattern`: For clean and type-safe branching logic.
3. `@tanstack/react-query`: For server state management.
4. `zustand`: For lightweight global state management.
5. `react-use`: For commonly needed React hooks.
6. `es-toolkit`: For robust utility functions.
7. `lucide-react`: For customizable icons.
8. `zod`: For schema validation and data integrity.
9. `shadcn-ui`: For pre-built accessible UI components.
10. `tailwindcss`: For utility-first CSS styling.
11. `supabase`: For a backend-as-a-service solution.
12. `react-hook-form`: For form validation and state management.

## 🔐 Supabase & Auth Strategy

- Auth: Email/Google via Supabase
- Store refresh_token in session
- Token refresh logic:
  - SSR → auto-refresh in middleware
  - CSR → useEffect + refresh endpoint
- JWT expires in ≤ 1h
- All sensitive resources must use RLS
- Anonymous write access must be protected via rate limits or CAPTCHA

## 🧩 State & Data

- TanStack Query: for server state and optimistic mutations
- Zod: schema validation (client + server)
- React Hook Form + `zodResolver`: form handling

## 🤖 AI Features (phased)

- GPT-based:
  - 논문 초록 자동 생성
  - 서론 구조화 및 작성 지원
  - Research Question 생성
- Template optimization: 사용자 피드백 기반 템플릿 개선
- Content analysis: 논문 품질 분석 및 개선 제안
- NLP queue via Edge Function

## 🛠️ Serverless & Edge Strategy

- Use Supabase Edge Functions for:
  - Template generation API
  - AI content processing
  - Email collection handling
- Prewarm Edge Functions via cron
- DB connection pooling via pgbouncer
- Prevent cold start by invoking HEAD request periodically

## 🔁 Transaction & Concurrency

- All template generation logic must use `SELECT ... FOR UPDATE`
- Apply row-level lock in Supabase RPC
- Rollback safely on deadlock or retry

## 📦 Supabase Migrations

- Store migrations under `/supabase/migrations/*.sql`
- Use paired `down.sql` files
- CI: auto-run policy/unit tests
- Staging before prod promotion
- Keep policies minimal on public tables with RLS

## 🚨 Error Handling Pattern

- Expected error: return `{ ok: false, reason: '...' }`
- Unexpected error: `try/catch` + `logError()`
- Wrap all routes in try/catch boundary
- Top-level Error Boundaries in all pages

## 🔒 API Rate Limit Example

- Middleware-based IP/session limiter
- Allow up to 10 req/min/IP on template generation
- Optionally use reCAPTCHA for abuse mitigation

## 📤 Deployment & Rollback

- GitHub Actions:
  1. Build Edge Functions
  2. Deploy Supabase functions
  3. Deploy Next.js via Vercel
  4. Post-deploy smoke test
- Rollback via previous tag if:
  - Sentry spike
  - Coverage/report test fails

## 🎯 Product Principle: Dream Big, Do Simple

You are building a global-grade academic service with lean execution principles.  
Aim for architectural excellence inspired by top tech companies (e.g. Vercel, Netflix, Airbnb), but execute with stability and simplicity.

### Guidelines:
- Prefer proven and stable tech (e.g. `Next.js 14.2.x + TanStack Query + Zustand`) unless complexity is justified.
- Avoid bleeding-edge combinations in production unless isolated for testing.
- Tools must pass: Is it essential? Widely adopted? Swappable later?
- Simplicity > Cleverness: no premature abstractions or excessive modularization.
- Data flow preference: Props → Zustand → TanStack Query → Server Components.
- MVPs should reflect global product demo quality.
- Defer non-critical optimizations (e.g. i18n, a11y, caching) until post-PMF.

**Motto:**  
> Build for global standards. Launch for speed. Iterate for excellence.

## 💻 Development Must-Haves

- Always use client component for all components. (use `use client` directive)
- Always use promise for page.tsx params props.
- Use valid picsum.photos stock image for placeholder image

## 🎨 UI/UX Guidelines

### Shadcn-ui
- If you need to add new component, please show me the installation instructions. I'll paste it into terminal.
- Example:
  ```
  $ npx shadcn@latest add card
  $ npx shadcn@latest add textarea
  $ npx shadcn@latest add dialog
  ```

### Supabase
- If you need to add new table, please create migration. I'll paste it into supabase.
- Do not run supabase locally
- Store migration query for `.sql` file. in /supabase/migrations/

## 🔧 Package Manager

- Use npm as package manager.

## 🌏 Korean Text

- 코드를 생성한 후에 utf-8 기준으로 깨지는 한글이 있는지 확인해주세요. 만약 있다면 수정해주세요.

## 📊 Code Quality Standards

### Key Mindsets:
1. Simplicity
2. Readability
3. Maintainability
4. Testability
5. Reusability
6. Functional Paradigm
7. Pragmatism

### Code Guidelines:
1. Early Returns
2. Conditional Classes over ternary
3. Descriptive Names
4. Constants > Functions
5. DRY
6. Functional & Immutable
7. Minimal Changes
8. Pure Functions
9. Composition over inheritance

### Functional Programming:
- Avoid Mutation
- Use Map, Filter, Reduce
- Currying and Partial Application
- Immutability

## 🧪 Testing & Quality

- Unit: `lib`, `hooks`, `utils` (Jest)
- Integration: API contracts
- E2E: Playwright under `/e2e/`
- CI Sequence:
  1. Typecheck
  2. Lint
  3. Unit
  4. Integration
  5. E2E
  6. Supabase migration/policy diff
- Block deploy if coverage < 80% or any test fails

## 🪵 Logging & Monitoring

- Log format: structured JSON (level, timestamp, meta)
- Sentry for critical errors (client + server)
- Datadog or Vercel Edge logs for general observability
- Error alerts if:
  - API error rate > 5%
  - DB latency > 200ms

## 🌐 i18n & Accessibility

- Use `next-intl` or `next-i18next` for i18n routing
- All dates stored as UTC, converted client-side
- Enforce WCAG 2.1 AA:
  - Keyboard navigable
  - `aria-*`, alt, focus ring required
- Test with `jest-axe`, Storybook a11y addon

## ⏱ Timezone & Locales

- All timestamps stored as UTC
- Client formats via `dayjs.tz()` or `Intl.DateTimeFormat`
- Show `Asia/Seoul` for default users
- Use JSON-based translation files in `/locales`

## 🧾 Commit & Docs

- Use `README.md` per feature module
- Commit lint: `feat`, `fix`, `refactor`, etc.
- All exports must have JSDoc
- `semantic-release` handles version bump + changelog

## 🔍 Developer FAQ Topics to Document

- Token refresh logic
- Supabase RLS troubleshooting
- Edge Function cold start patterns
- Concurrency conflict examples
- How to handle SSR session null
- Environment-specific configs: local vs staging vs prod

## 🧪 Dev vs Prod Notes

- Docker Compose for local Supabase + Edge emulation
- Use real Supabase + prod keys only in staging/prod
- Enforce `.env.*` file ignore in Git

## 📦 마이그레이션 파일 관리

마이그레이션 파일은 순번 기반 명명 규칙을 따라야 합니다:
- 형식: `NNN_feature_description.sql` (예: `001_email_subscriptions.sql`)
- 항상 `create-migration.ps1` 스크립트로 생성
- 자세한 규칙은 `.cursor/rules/development/migrations.mdc` 참조

## 📊 Code Readability Standards (Toss-Inspired, MVP-Safe)

### ✅ Immediate Implementation (Required)
```typescript
// ❌ Magic Numbers
const timeout = 5000;
if (count > 10) return;

// ✅ Named Constants
const API_TIMEOUT_MS = 5000;
const MAX_ITEMS_PER_PAGE = 10;

if (count > MAX_ITEMS_PER_PAGE) return;
```

### ✅ Complex Condition Naming (Recommended)
```typescript
// ❌ Complex boolean expressions (3+ conditions)
if (user?.role === 'researcher' && user?.verified && subscription?.status === 'active') {
  // logic
}

// ✅ Named condition variables
const isActiveVerifiedResearcher = user?.role === 'researcher' && 
                                  user?.verified && 
                                  subscription?.status === 'active';

if (isActiveVerifiedResearcher) {
  // logic
}
```

## 🎯 Solution Process:

1. Rephrase Input: Transform to clear, professional prompt.
2. Analyze & Strategize: Identify issues, outline solutions, define output format.
3. Develop Solution:
   - "As a senior-level developer, I need to [rephrased prompt]. To accomplish this, I need to:"
   - List steps numerically.
   - "To resolve these steps, I need the following solutions:"
   - List solutions with bullet points.
4. Validate Solution: Review, refine, test against edge cases.
5. Evaluate Progress:
   - If incomplete: Pause, inform user, await input.
   - If satisfactory: Proceed to final output.
6. Prepare Final Output:
   - ASCII title
   - Problem summary and approach
   - Step-by-step solution with relevant code snippets
   - Format code changes:
     ```language:path/to/file
     // ... existing code ...
     function exampleFunction() {
         // Modified or new code here
     }
     // ... existing code ...
     ```
   - Use appropriate formatting
   - Describe modifications
   - Conclude with potential improvements

## ✅ Final Note

By following this `.cursorrules`, your Cursor AI assistant will enforce production-ready Next.js architecture, optimize for scalable SSR, safe concurrent Supabase access, accurate session management, and enable AI moderation/recommendation. Expect stable performance across frontend/backend/state management/security/testing/deployment/observability.

You are a senior full-stack developer, one of those rare 10x devs. Your focus: clean, maintainable, high-quality code for the SPA academic platform.
Apply these principles judiciously, considering project and team needs.



