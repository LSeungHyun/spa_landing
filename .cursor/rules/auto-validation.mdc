---
description: 
globs: 
alwaysApply: false
---
# 🌐 언어 사용 규칙 (Language Usage Rules)

**기본 언어**: 한국어
- 모든 답변과 설명은 한국어로 제공
- 코드 주석과 변수명은 영어 사용 (개발 표준)
- 기술 문서는 한국어 우선, 필요시 영어 병기

---

<!-- ruleType: always -->

# 🔍 자동 빌드 검증 및 에러 검수 규칙 (Auto Build Validation & Error Review Rules)

**중요**: 모든 답변과 설명은 한국어로 제공해주세요.

## 🎯 목적
코드 생성/수정 후 자동으로 빌드 에러, import 에러, undefined 에러를 검수하여 사용자에게 안정적인 코드를 제공합니다.

## ✅ 필수 검증 프로세스

### 1. 코드 작성 후 자동 검증 (Required)
모든 코드 생성/수정 작업 완료 후 **반드시** 다음 단계를 수행합니다:

1. **타입스크립트 컴파일 검증**
2. **Import 경로 검증**
3. **의존성 검증**
4. **빌드 에러 확인**
5. **런타임 에러 가능성 검토**

### 2. 검증 체크리스트 (Required)
매번 코드 작성 후 다음을 확인합니다:

#### Import 관련
- [ ] 모든 import 경로가 올바른가?
- [ ] 상대 경로가 정확한가? (`../`, `./`)
- [ ] 절대 경로 alias가 정확한가? (`@/`, `~/`)
- [ ] 외부 라이브러리가 package.json에 설치되어 있는가?
- [ ] 타입 정의가 필요한 라이브러리는 @types가 설치되어 있는가?

#### 타입스크립트 관련
- [ ] 모든 변수와 함수에 적절한 타입이 지정되어 있는가?
- [ ] any 타입 사용을 최소화했는가?
- [ ] 인터페이스/타입 정의가 올바른가?
- [ ] 제네릭 사용이 적절한가?

#### 변수/함수 정의 관련
- [ ] 모든 사용된 변수가 정의되어 있는가?
- [ ] 함수 호출 시 올바른 매개변수를 전달하는가?
- [ ] React 컴포넌트의 props가 올바르게 정의되어 있는가?
- [ ] useState, useEffect 등 훅이 올바르게 사용되었는가?

#### Next.js 관련
- [ ] 페이지 컴포넌트가 올바른 export를 사용하는가?
- [ ] 'use client' 지시어가 필요한 곳에 있는가?
- [ ] 서버/클라이언트 컴포넌트 분리가 올바른가?
- [ ] 동적 라우팅 경로가 올바른가?

### 3. Undefined/Null 에러 예방 (Required)
```typescript
// ❌ 잘못된 예
const user = data.user;
const name = user.name; // user가 undefined일 수 있음

// ✅ 올바른 예 - 옵셔널 체이닝
const name = data.user?.name;

// ❌ 잘못된 예
const config = configs[selectedKey];
const value = config.value; // config가 undefined일 수 있음

// ✅ 올바른 예 - 방어적 체크
const config = configs[selectedKey];
if (!config) {
  console.error(`Config not found for key: ${selectedKey}`);
  return;
}
const value = config.value;

// ✅ 올바른 예 - 기본값 제공
const config = configs[selectedKey] || defaultConfig;
const value = config.value;
```

#### 배열/객체 접근 에러 예방 (Required)
```typescript
// ❌ 잘못된 예
const items = response.data;
const firstItem = items[0]; // items가 undefined일 수 있음

// ✅ 올바른 예
const items = response.data || [];
const firstItem = items[0];

// ❌ 잘못된 예 - 정규식 결과
const match = text.match(/pattern/);
const result = match[1]; // match가 null일 수 있음

// ✅ 올바른 예
const match = text.match(/pattern/);
if (match) {
  const result = match[1];
}
```

#### 객체 속성 접근 예방 (Required)
```typescript
// ❌ 잘못된 예
const persona = personas[selectedPersona];
const heroText = persona.heroText; // persona가 undefined일 수 있음

// ✅ 올바른 예 - 옵셔널 체이닝
const heroText = personas[selectedPersona]?.heroText;

// ✅ 올바른 예 - 방어적 체크
const persona = personas[selectedPersona];
if (!persona) {
  console.error(`Persona not found: ${selectedPersona}`);
  return defaultHeroText;
}
const heroText = persona.heroText;

// ✅ 올바른 예 - 기본값과 함께
const heroText = personas[selectedPersona]?.heroText || '기본 텍스트';
```

### 4. 자동 검증 실행 (Required)
코드 작성 완료 후 반드시 다음 명령어들을 실행하여 검증합니다:

```bash
# 타입스크립트 컴파일 검사
npx tsc --noEmit

# Next.js 빌드 검사
npm run build

# 린트 검사
npm run lint

# 타입 검사
npm run type-check
```

### 5. 에러 발견 시 대응 (Required)
검증 중 에러가 발견되면:

1. **에러 유형 분류**
   - 빌드 에러: 컴파일 실패
   - Import 에러: 모듈을 찾을 수 없음
   - 타입 에러: 타입 불일치
   - 런타임 에러: 실행 중 발생 가능한 에러

2. **즉시 수정**
   - 발견된 모든 에러를 즉시 수정
   - 수정 후 재검증 실행
   - 사용자에게 수정 내용 보고

3. **예방적 조치**
   - 유사한 에러 재발 방지를 위한 코드 개선
   - 필요시 추가 타입 정의 생성

### 6. 사용자 보고 형식 (Required)
검증 완료 후 다음 형식으로 보고합니다:

```
✅ 자동 검증 완료

🔍 검증 항목:
- TypeScript 컴파일: ✅ 통과
- Import 경로: ✅ 모든 경로 유효
- 타입 정의: ✅ 모든 타입 올바름
- 빌드 테스트: ✅ 성공

⚠️ 발견된 문제 (있는 경우):
- [문제 유형]: [문제 설명] → [수정 내용]

📦 생성/수정된 파일:
- [파일 경로]: [변경 내용 요약]
```

### 7. 실시간 에러 모니터링 (Recommended)
코드 작성 중에도 다음을 지속적으로 확인합니다:

- VSCode/Cursor의 TypeScript 에러 표시
- ESLint 경고 및 에러
- Import 자동 완성 가능 여부
- 타입 추론 정확성

### 8. 일반적인 에러 패턴 예방 (Required)

#### Import 에러 예방
```typescript
// ❌ 잘못된 예
import { Button } from 'components/ui/button';

// ✅ 올바른 예
import { Button } from '@/components/ui/button';
```

#### 타입 에러 예방
```typescript
// ❌ 잘못된 예
const handleClick = (event) => { // any 타입

// ✅ 올바른 예
const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
```

#### 컴포넌트 에러 예방
```typescript
// ❌ 잘못된 예
export function Component() { // default export 없음

// ✅ 올바른 예
export default function Component() {
```

### 9. 에러 로그 관리 (Optional)
심각한 에러나 반복되는 패턴의 에러는 별도로 기록하여 향후 개선에 활용합니다.

## 🚨 긴급 상황 대응
만약 자동 검증에서 해결할 수 없는 복잡한 에러가 발견되면:

1. 에러의 정확한 내용과 발생 위치를 사용자에게 즉시 보고
2. 가능한 해결 방안 제시
3. 필요시 추가 정보 요청

## 📋 성능 최적화
검증 과정이 너무 오래 걸리지 않도록:

- 작은 단위로 검증 실행
- 병렬 처리 가능한 검증은 동시 실행
- 캐시 활용으로 중복 검증 방지

이 규칙을 통해 사용자는 항상 에러 없는 안정적인 코드를 받을 수 있습니다.




