---
description: 안돼, 이상, 문제, 에러, 해결, 수정, 진단, 분석
globs: 
alwaysApply: false
---
네, `.mdc` 파일로 바로 사용할 수 있도록 커서 룰 형식에 맞춰 작성해드리겠습니다.

```markdown
---
description: 고급 버그 진단 및 근본 해결 시스템
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
triggers:
  - "문제"
  - "원인"
  - "분석"
  - "해결"
  - "수정"
  - "근본"
  - "솔루션"
  - "고쳐"
  - "안 돼"
  - "안 되"
  - "이상"
  - "에러"
  - "버그"
  - "오류"
priority: highest
alwaysApply: true
---

# ✅ 고급 버그 진단 및 근본 해결 시스템 (v3.0)

## 🎯 목적
체계적인 디버깅 방법론과 자동화된 대응 체계를 통해 근본 원인을 파악하고 지속 가능한 해결책을 제공합니다.

## 🧠 핵심 역량
- **디버깅 전문성**: 5 Whys, Fishbone diagram, 체계적 디버깅
- **기술 스택**: Next.js, React, TypeScript, Supabase, SWR
- **분석 도구**: Chrome DevTools, React DevTools, 네트워크 분석

## ⚙️ 트리거 패턴
다음과 같은 요청 시 자동 활성화:
- "문제가 발생했어"
- "근본적인 원인을 분석해줘"
- "근본적인 솔루션으로 해결해줘"
- "문제의 원인을 파악해서 수정해줘"
- "왜 이런 문제가 발생하는지 분석해서 고쳐줘"

## 🔍 진단 프레임워크

### Phase 1: 정보 수집
1. **에러 컨텍스트**
   - 완전한 에러 메시지, 스택 트레이스
   - 재현 단계 및 빈도
   - 환경 정보 (브라우저, OS, Node 버전)

2. **최근 변경사항**
   - Git 커밋 히스토리
   - 패키지 업데이트
   - 환경 설정 변경

### Phase 2: 근본 원인 분석 (5 Whys)
```
Why 1: 왜 이 에러가 발생했나?
Why 2: 왜 그 조건이 존재했나?
Why 3: 왜 그 조건이 체크되지 않았나?
Why 4: 왜 테스트에서 발견되지 않았나?
Why 5: 왜 이런 패턴이 반복되는가?
```

### Phase 3: 해결책 설계
1. **즉시 조치**: 당장의 문제 해결
2. **근본 해결**: 구조적 개선
3. **예방 조치**: 테스트 추가, 모니터링

## 💡 일반적인 패턴별 해결책

### 1. Hydration 에러
```typescript
// 문제: 서버/클라이언트 불일치
// 해결: useEffect로 클라이언트 전용 로직 격리
const [mounted, setMounted] = useState(false);
useEffect(() => setMounted(true), []);
```

### 2. 상태 관리 이슈
```typescript
// 문제: Stale closure
// 해결: 함수형 업데이트 사용
setState(prev => ({ ...prev, newValue }));
```

### 3. 타입 에러
```typescript
// 문제: undefined 접근
// 해결: Optional chaining & nullish coalescing
const value = data?.property ?? defaultValue;
```

### 4. 비동기 처리 문제
```typescript
// 문제: Race condition
// 해결: 적절한 cleanup과 취소 처리
useEffect(() => {
  let cancelled = false;
  
  async function fetchData() {
    const result = await api.getData();
    if (!cancelled) {
      setData(result);
    }
  }
  
  fetchData();
  return () => { cancelled = true; };
}, []);
```

### 5. PowerShell 명령어 문제
```powershell
# 문제: && 연산자 미지원
cd /c/Users/ledag/spa_saas && npm run dev

# 해결 1: 세미콜론 사용
cd C:\Users\ledag\spa_saas; npm run dev

# 해결 2: 개별 실행
cd C:\Users\ledag\spa_saas
npm run dev

# 해결 3: PowerShell 7+ 사용 (&&, || 지원)
```

## 📋 표준 응답 템플릿

### 🔍 문제 분석
- **증상**: [사용자가 경험한 현상]
- **에러**: [정확한 에러 메시지]
- **재현**: [재현 조건 및 단계]
- **환경**: [브라우저, OS, 버전 정보]

### 🎯 근본 원인 (5 Whys 분석)
1. **직접 원인**: [표면적 원인]
2. **근본 원인**: [5 Whys 결과]
3. **시스템적 문제**: [구조적 이슈]

### 💡 해결 방안

#### 1. 즉시 조치
```typescript
// 당장 적용할 수 있는 해결책
```

#### 2. 근본 해결
```typescript
// 구조적 개선 코드
```

#### 3. 예방 조치
- [ ] 유닛 테스트 추가
- [ ] E2E 테스트 시나리오
- [ ] 모니터링 설정
- [ ] 문서 업데이트

### 🧪 검증 방법
1. [테스트 단계 1]
2. [테스트 단계 2]
3. [예상 결과]

### 📝 커밋 메시지
```
fix(component): [간단한 설명]

- 문제: [무엇이 잘못되었는지]
- 원인: [왜 발생했는지]
- 해결: [어떻게 해결했는지]

Closes #[이슈번호]
```

## 🔄 피드백 루프
1. **수정 적용** → 사용자 테스트
2. **결과 확인** → 문제 지속 시 재진단
3. **패턴 분석** → 유사 문제 예방
4. **지식 축적** → 팀 공유 및 문서화

## 📊 **토스 기반 버그 예방 패턴 (측정 가능)**

### 🎯 일반적인 버그 패턴과 예방책

#### 1. Magic Numbers 관련 버그 (측정: 주간 발생 건수)
```typescript
// ❌ 버그 유발 패턴
setTimeout(() => fetchData(), 3000); // 왜 3초인지 불명확
if (items.length > 20) showMore = true; // 20의 의미 불분명

// ✅ 토스 스타일 예방
const API_RETRY_DELAY_MS = 3000; // 3초 대기 후 재시도
const ITEMS_PER_PAGE = 20; // 페이지당 아이템 수

setTimeout(() => fetchData(), API_RETRY_DELAY_MS);
if (items.length > ITEMS_PER_PAGE) showMore = true;
```

#### 2. 복잡한 조건문 버그 (측정: 조건부 렌더링 오류 건수)
```typescript
// ❌ 버그 유발: 복잡한 조건으로 인한 실수
if (user?.role === 'vendor' && user?.subscription === 'premium' && user?.verified && !user?.suspended) {
  // 조건이 복잡해서 실수 가능성 높음
}

// ✅ 토스 스타일 예방
const canAccessPremiumFeatures = user?.role === 'vendor' && 
                                user?.subscription === 'premium' && 
                                user?.verified && 
                                !user?.suspended;

if (canAccessPremiumFeatures) {
  // 의도가 명확하여 실수 방지
}
```

### 📈 **버그 패턴 추적 지표**

| 버그 유형 | 현재 발생률 | 목표 (4주 후) | 측정 방법 |
|-----------|-------------|---------------|-----------|
| Magic Number 관련 | TBD | 50% 감소 | 이슈 라벨링 |
| 복잡한 조건문 | TBD | 30% 감소 | 코드 리뷰 체크 |
| 하드코딩 URL | TBD | 90% 감소 | grep 스크립트 |
| 권한 체크 누락 | TBD | 70% 감소 | 보안 테스트 |

### 🔍 **주간 버그 패턴 분석**
```bash
# 매주 실행할 스크립트
# 1. Magic numbers 검사
grep -r "\b[0-9]\{2,\}\b" src/ --include="*.ts" --include="*.tsx" | wc -l

# 2. 복잡한 조건문 검사
grep -r "&&.*&&.*&&\|||.*||.*||" src/ --include="*.ts" --include="*.tsx" | wc -l

# 3. 하드코딩 URL 검사
grep -r "http://\|https://\|'/api\|\"api" src/ --include="*.ts" --include="*.tsx" | wc -l
```

### 🎯 **실측 기반 우선순위**
- **High Priority**: 3회 이상 반복되는 버그 패턴
- **Medium Priority**: 2회 발생한 패턴
- **Low Priority**: 1회만 발생한 패턴

### 📋 **토스 패턴 적용 조건**
| 패턴 | 적용 조건 | 적용 방법 |
|------|-----------|-----------|
| 조건문 분리 | 동일 조건 버그 3회 이상 | 명명된 변수로 개선 |
| 컴포넌트 분리 | 역할별 버그 5회 이상 | 점진적 컴포넌트 분리 |
| 유틸 함수 | 중복 로직 버그 3회 이상 | 단순 헬퍼 함수 생성 |

## 🚨 특별 고려사항

### 프로덕션 vs 개발
- 환경별 다른 에러 동작
- 디버깅 도구 가용성 차이

### 성능 영향
- 해결책이 성능을 저하시키지 않도록 주의
- 필요시 성능 프로파일링

### 보안 고려
- 수정사항이 보안 취약점을 만들지 않도록 검증
- 민감한 정보 노출 방지

## 📌 자동 진단 규칙
- 모든 문제는 근본 원인까지 추적
- 단순 수정이 아닌 재발 방지 중심
- 코드와 함께 명확한 설명 제공
- 테스트 가능한 해결책 제시
```

이 내용을 `.cursor/rules/bug-advanced.mdc` 파일로 저장하시면 됩니다. 파일 상단의 YAML 프론트매터가 커서에서 룰을 인식하고 자동으로 트리거하도록 설정되어 있습니다.
