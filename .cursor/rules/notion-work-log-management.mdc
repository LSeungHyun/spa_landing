---
description: 
globs: 
alwaysApply: false
---
# Notion Work Log Management Protocol

## 🎯 CRITICAL DIRECTIVE: Workspace Hierarchy Compliance

### **MANDATORY EXECUTION SEQUENCE**
When user requests creation of work logs (업무일지) in Notion:

1. **NEVER** create pages at workspace root level
2. **ALWAYS** follow the exact hierarchy: `🖥️ 개발 워크스페이스` → `SPA 프로젝트(승현)` → `📋 업무일지 (Work log)`
3. **MUST** use the correct parent page ID for all work log entries

### **ABSOLUTE REQUIREMENTS**

#### 🔴 CRITICAL PARENT PAGE IDENTIFICATION
- **Target Parent**: `SPA 프로젝트(승현)` 
- **Parent Page ID**: `214ce2a8-927c-80-44-9484-e51c04af048e`
- **Parent URL**: `https://www.notion.so/214ce2a8927c80449484e51c04af048e`

#### 🔴 MANDATORY VERIFICATION STEPS
Before creating ANY work log page:
1. **VERIFY** the parent page exists and is accessible
2. **CONFIRM** the user wants the work log under SPA project specifically
3. **VALIDATE** the parent page ID matches the SPA project page
4. **CHECK** existing work log structure for naming consistency

### **DATE HANDLING PROTOCOL**

#### 🗓️ CRITICAL DATE RESOLUTION RULES
**MANDATORY SEQUENCE** for all work log date handling:

1. **ALWAYS** execute system date command first before creating work logs
2. **NEVER** assume or guess the current date from context
3. **MUST** use terminal date command to get accurate system date
4. **VALIDATE** date format and confirm with user if needed

#### 🚨 DUPLICATE PREVENTION PROTOCOL
**CRITICAL RULE**: Before creating any work log, MUST check for existing work logs with same date.

##### 📋 Pre-Creation Duplicate Check Sequence
```bash
# STEP 1: Get current system date
current_date = run_terminal_cmd("Get-Date -Format 'yyyy.MM.dd'")

# STEP 2: Search for existing work log with same date
search_query = f"📋 업무일지 - {current_date}"
existing_logs = mcp_notion_search(query=search_query, filter_object_type="page")

# STEP 3: Decision logic
if existing_logs.found:
    # UPDATE existing work log
    existing_page_id = existing_logs.results[0].id
    action = "UPDATE_EXISTING"
    message = f"Found existing work log for {current_date}. Adding content to existing log."
else:
    # CREATE new work log
    action = "CREATE_NEW"
    message = f"No existing work log found for {current_date}. Creating new work log."

# STEP 4: Inform user and proceed accordingly
print(message)
```

##### ⚖️ Update vs Create Decision Matrix
| Scenario | Action | Method |
|---|---|---|
| **Same date work log exists** | ✅ **UPDATE** existing log | `mcp_notion_append-blocks` |
| **No work log for date exists** | ✅ **CREATE** new log | `mcp_notion_create-page` |
| **User explicitly requests new log** | ⚠️ **CONFIRM** with user first | Ask for confirmation |
| **Multiple logs for same date found** | 🚨 **ERROR** - investigate | Manual intervention needed |

##### 🔄 Mandatory Duplicate Check Implementation
```typescript
// REQUIRED function before any work log creation
async function checkExistingWorkLog(date: string): Promise<{
  exists: boolean;
  pageId?: string;
  action: 'UPDATE_EXISTING' | 'CREATE_NEW';
  message: string;
}> {
  const searchQuery = `📋 업무일지 - ${date}`;
  const searchResults = await mcp_notion_search({
    query: searchQuery,
    filter_object_type: "page"
  });
  
  if (searchResults.results && searchResults.results.length > 0) {
    // Found existing work log
    return {
      exists: true,
      pageId: searchResults.results[0].id,
      action: 'UPDATE_EXISTING',
      message: `✅ Found existing work log for ${date}. Will add content to existing log.`
    };
  } else {
    // No existing work log found
    return {
      exists: false,
      action: 'CREATE_NEW',
      message: `📝 No existing work log found for ${date}. Will create new work log.`
    };
  }
}
```

#### 📅 Date Resolution Methods (Priority Order)
```bash
# Method 1: PowerShell date command (PREFERRED for Windows)
Get-Date -Format "yyyy.MM.dd"

# Method 2: Standard date command (Linux/macOS)
date "+%Y.%m.%d"

# Method 3: Explicit user confirmation (FALLBACK)
"Please confirm today's date in YYYY.MM.DD format"
```

#### ⚠️ Date Validation Requirements
- **Format**: YYYY.MM.DD (Korean style with dots)
- **Timezone**: Use system local timezone
- **Confirmation**: Always show resolved date to user before proceeding
- **Error Handling**: Request re-input if date parsing fails

#### 🚨 FORBIDDEN Date Behaviors
- **NEVER** use hardcoded or assumed dates (e.g., 2024.xx.xx when it's 2025)
- **NEVER** proceed without executing date command first
- **NEVER** rely on training data cutoff dates or context clues
- **NEVER** ignore timezone or system date differences

#### 🔄 Mandatory Pre-Creation Workflow
```bash
# STEP 1: Get system date
run_terminal_cmd("Get-Date -Format 'yyyy.MM.dd'")

# STEP 2: Parse and validate result
current_date = parse_date_output()

# STEP 3: CHECK FOR EXISTING WORK LOG (NEW MANDATORY STEP)
existing_check = checkExistingWorkLog(current_date)

# STEP 4: Decision based on existing work log check
if existing_check.action == "UPDATE_EXISTING":
    print(f"✅ {existing_check.message}")
    # Proceed with updating existing work log
    target_page_id = existing_check.pageId
    use_append_blocks = true
else:
    print(f"📝 {existing_check.message}")
    # Proceed with creating new work log
    use_create_page = true

# STEP 5: Confirm with user
"Work log action for {current_date}: {existing_check.action}. Proceed?"

# STEP 6: Execute appropriate Notion operation
```

### **EXECUTION PROTOCOL**

#### ✅ CORRECT Implementation Pattern
```typescript
// ALWAYS use this exact parent specification
{
  "parent": {
    "page_id": "214ce2a8-927c-80-44-9484-e51c04af048e",
    "type": "page_id"
  },
  "pages": [{
    "properties": {
      "title": "📋 업무일지 - YYYY.MM.DD"
    },
    "content": "Work log content..."
  }]
}
```

#### ❌ FORBIDDEN Actions
- **NEVER** omit the parent specification
- **NEVER** create work logs at workspace root
- **NEVER** use generic page creation without parent context
- **NEVER** assume default workspace location

### **ERROR PREVENTION MECHANISMS**

#### 🛡️ Pre-Creation Validation Checklist
Before executing any Notion work log operation:
- [ ] **DUPLICATE CHECK**: Existing work log search completed for target date
- [ ] **ACTION DECISION**: UPDATE_EXISTING vs CREATE_NEW determined
- [ ] Parent page ID is explicitly set to SPA project (for new logs)
- [ ] Title follows exact naming convention: `📋 업무일지 - YYYY.MM.DD` (for new logs)
- [ ] Content structure matches existing work log format
- [ ] User context confirms SPA project work log intent
- [ ] **PREVENTION**: No duplicate work logs will be created for same date

#### 🔍 Context Analysis Requirements
When user mentions "업무일지" or "work log":
1. **ASSUME** they mean SPA project work log unless explicitly stated otherwise
2. **SEARCH** for existing work logs to understand structure
3. **FETCH** the SPA project page to confirm current structure
4. **VALIDATE** the intended location with user if ambiguous

### **PROMPT ENGINEERING SAFEGUARDS**

#### 🎯 Chain-of-Thought Validation
Before any Notion work log operation:
```
1. IDENTIFY: What type of page is being requested?
2. DATE CHECK: What is the target date for this work log?
3. DUPLICATE SEARCH: Does a work log already exist for this date?
4. ACTION DECISION: Should I UPDATE existing or CREATE new?
5. LOCATE: Where should this page be created/updated in the hierarchy?
6. VERIFY: Is the parent page correctly identified (for new logs)?
7. CONFIRM: Does this match user's intended workspace structure?
8. EXECUTE: Only proceed if all validations pass and no duplicates will be created
```

#### 🔄 Self-Correction Protocol
If error occurs:
1. **ACKNOWLEDGE** the specific mistake made
2. **ANALYZE** root cause (missing parent, wrong hierarchy, duplicate creation, etc.)
3. **CORRECT** by following proper protocol
4. **DOCUMENT** the error pattern for future prevention

#### 🚨 Duplicate Creation Error Recovery
If duplicate work log was accidentally created:
1. **IMMEDIATELY** acknowledge the duplicate creation error
2. **IDENTIFY** which work log should be kept (usually the first/original one)
3. **MIGRATE** content from duplicate to original work log using `mcp_notion_append-blocks`
4. **DELETE** the duplicate work log to clean up workspace
5. **APOLOGIZE** and explain the correction process
6. **VERIFY** final result shows only one work log per date

### **WORKSPACE STRUCTURE REFERENCE**

#### 📊 Hierarchy Map
```
🖥️ 개발 워크스페이스 (Development Workspace)
├── 📋 신규 프로젝트 시작 체크리스트
├── 🛠️ 공용 개발 리소스
├── 👰🏻‍♀️ 웨딩 사이트 (보류)
├── 🎲 보드게임 랭킹 사이트 (아카이브)
├── SPA 프로젝트(승현) ← **TARGET PARENT**
│   ├── 🧭 프로젝트 관리 (Planning & PM)
│   ├── ✨ 기획 및 설계 (Ideation & Specs)
│   ├── 📚 자료 아카이브 (Resources & Archive)
│   └── 📋 업무일지 (Work log) ← **WORK LOGS GO HERE**
│       ├── 📋 업무일지 - 2025.06.19
│       ├── 📋 업무일지 - 2025.06.21
│       └── 📋 업무일지 - 2025.06.22
└── 참고문서
```

### **NAMING CONVENTIONS**

#### 📝 Work Log Title Format
- **Pattern**: `📋 업무일지 - YYYY.MM.DD`
- **Example**: `📋 업무일지 - 2025.06.22`
- **Emoji**: Always use 📋 (clipboard emoji)
- **Date Format**: YYYY.MM.DD (Korean style with dots)

### **CONTENT STRUCTURE & SECTION ORGANIZATION**

#### 🎯 PURPOSE-BASED SECTION CATEGORIZATION
**CRITICAL RULE**: When adding content to existing work logs, organize by work purpose/intent rather than time-based sections.

#### 📋 Standard Section Categories
Use these purpose-based section headers for organizing work entries:

| Section Header | Purpose | Usage Examples |
|---|---|---|
| **✅ 기능 구현 - [Feature Name]** | Feature development work | `✅ 기능 구현 - 사전 등록 시스템` |
| **🔍 점검 및 검토 - [Subject]** | Code review, analysis, inspection | `🔍 점검 및 검토 - 테이블 구조 확인` |
| **📦 배포 준비 - [Task]** | Testing, documentation, deployment prep | `📦 배포 준비 - API 테스트` |
| **💬 팀 논의 및 결정** | Meetings, discussions, decisions | `💬 팀 논의 및 결정 - UI/UX 개선사항` |
| **🛠️ 리팩토링 - [Component/Area]** | Code refactoring and improvements | `🛠️ 리팩토링 - 기존 컴포넌트 구조 개선` |
| **🐛 버그 수정 - [Issue]** | Bug fixes and troubleshooting | `🐛 버그 수정 - 등록 폼 유효성 검사` |
| **📚 학습 및 연구 - [Topic]** | Learning, research, investigation | `📚 학습 및 연구 - Next.js App Router 패턴` |
| **🔧 환경 설정 - [Tool/System]** | Development environment setup | `🔧 환경 설정 - CI/CD 파이프라인` |

#### ❌ FORBIDDEN Section Types
- **NEVER** use time-based sections like "추가 작업 (오후)", "추가 작업 (저녁)"
- **NEVER** use generic sections like "기타 작업", "잡다한 업무"
- **NEVER** create sections without clear purpose identification

#### 🏷️ Content Structure Template
```markdown
# YYYY.MM.DD Development Work Log

## 📋 Work Overview
**Project**: SPA Landing (Smart Prompt Assistant)
**Date**: YYYY년 M월 D일
**Developer**: [Developer Name]

---

## ✅ 기능 구현 - [Feature Name]
**Purpose**: [Clear description of what feature was implemented]
**Files Modified**: 
- `src/path/to/file.tsx`
- `src/path/to/another.ts`

**Implementation Details**:
- [Specific technical implementation]
- [Key decisions made]
- [Challenges overcome]

**Result**: [What was achieved]

### 🔄 Git Commit Information
**Commit Message**: `[commit-message]`
**Commit Hash**: `[commit-hash]` (optional)
**Files Changed**: [number] files, [+additions], [-deletions]

**Commit Details**:
- [Summary of changes]
- [Impact of changes]

---

## 🔍 점검 및 검토 - [Subject]
**Purpose**: [What was reviewed/inspected]
**Scope**: [Areas covered in the review]

**Findings**:
- [Key observations]
- [Issues identified]
- [Recommendations]

**Actions Taken**: [What was done as a result]

### 🔄 Git Commit Information
**Commit Message**: `[commit-message]`
**Files Changed**: [number] files

**Commit Details**:
- [Summary of changes]
- [Impact of changes]

---

## 🎯 Next Steps
- [ ] [Specific next action item]
- [ ] [Another action item]
- [ ] [Future consideration]

---
*Work log created: YYYY년 M월 D일*
```

#### 🔄 **IMPROVED SECTION STRUCTURE RULES**

##### 📐 Work Unit Separation Protocol
**CRITICAL IMPROVEMENT**: Each work unit (작업 단위) must be clearly separated and self-contained.

**MANDATORY STRUCTURE**:
1. **Work Section Header** (H2): `## [Category Icon] [Category] - [Specific Task]`
2. **Work Content**: Purpose → Implementation → Result
3. **Git Commit Sub-section** (H3): `### 🔄 Git Commit Information`
4. **Section Separator**: `---` (horizontal rule) after each complete work unit

##### ✅ **CORRECT Work Unit Structure Example**:
```markdown
## 🛠️ 리팩토링 - 페이지 하단 정리 및 푸터 업데이트

**Purpose**: 페이지 하단의 불필요한 통계 정보 제거 및 저작권 연도 업데이트
**Files Modified**: 
- `src/app/page.tsx`

**Implementation Details**:
- 페이지 하단 사전 등록 통계 섹션 완전 제거
- "1,247명 사전 등록" 및 "4.9/5 만족도" 텍스트 제거
- 관련 아이콘(Users, Star) 및 컨테이너 div 정리
- 푸터 저작권 연도를 2024에서 2025로 업데이트

**Result**: 페이지 하단이 더 깔끔해지고 불필요한 통계 정보가 제거됨. 푸터가 2025년으로 정확히 업데이트됨

### 🔄 Git Commit Information
**Commit Message**: `refactor: update footer and remove stats`
**Files Changed**: 1개 파일 수정
**Branch Status**: origin/master보다 2개 커밋 앞섰음

**Commit Details**:
- 페이지 하단 사용자 통계 표시 영역 완전 제거로 UI 정리
- 2025년 저작권 표시로 업데이트하여 현재 연도 반영
- 코드 정리를 통한 유지보수성 향상

---

## ✅ 기능 구현 - 새로운 기능 추가

**Purpose**: [다음 작업의 목적]
...

### 🔄 Git Commit Information
**Commit Message**: `[다음 커밋 메시지]`
...

---
```

##### ❌ **FORBIDDEN Structure (Old Way)**:
```markdown
## 🛠️ 리팩토링 - 페이지 하단 정리 및 푸터 업데이트
[work content]

---

## 🔄 Git Commit Information  ← WRONG: Separate from work content
[commit info]

## ✅ 기능 구현 - 새로운 기능  ← WRONG: No separator from previous commit
[next work content]
```

##### 🎯 **Visual Separation Rules**
1. **Within Work Unit**: Use `### 🔄 Git Commit Information` as H3 subsection
2. **Between Work Units**: Use `---` horizontal rule separator
3. **Consistent Hierarchy**: H2 for work categories, H3 for git commits
4. **Clear Boundaries**: Each work unit is self-contained with its own git information

##### 🔧 **Implementation Protocol for Updates**
When adding new work to existing logs:

1. **IDENTIFY** the work purpose from standard categories
2. **CREATE** H2 section with appropriate category and specific task name
3. **INCLUDE** Purpose → Implementation → Result structure
4. **ADD** H3 subsection `### 🔄 Git Commit Information` within the work unit
5. **CLOSE** with `---` separator before next work unit
6. **ENSURE** each work unit is visually and logically separated

#### ✅ Section Addition Examples
```markdown
## ✅ 기능 구현 - 얼리버드 혜택 섹션
**Purpose**: Update early bird benefits from 3 to 4 items and integrate registration flow
**Files Modified**: `src/app/page.tsx`

**Implementation Details**:
- Expanded benefits grid from 3 to 4 items
- Updated grid layout to `md:grid-cols-2 lg:grid-cols-4`
- Removed quick/detailed registration toggle system
- Simplified to single unified registration form

**Result**: Improved user experience with clearer benefits and streamlined registration

### 🔄 Git Commit Information
**Commit Message**: `feat: expand benefits and simplify registration`
**Files Changed**: 1개 파일 수정

**Commit Details**:
- Benefits section expanded for better user understanding
- Registration flow simplified for improved conversion

---

## 🛠️ 리팩토링 - 등록 플로우 간소화
**Purpose**: Remove complexity from dual registration system
**Files Modified**: `src/app/page.tsx`

**Implementation Details**:
- Removed `showEnhancedForm` state variable
- Eliminated registration type selection buttons
- Consolidated to single registration form
- Updated labels from "상세등록" to "사전 등록 폼"

**Result**: 87 lines removed, 20 lines added, cleaner codebase

### 🔄 Git Commit Information
**Commit Message**: `refactor: simplify registration flow`
**Files Changed**: 1개 파일 수정

**Commit Details**:
- Code complexity reduced significantly
- User experience streamlined

---
```

### **EMERGENCY PROTOCOLS**

#### 🚨 If Wrong Location Created
1. **IMMEDIATELY** acknowledge the error
2. **MOVE** the page to correct location using `mcp_notion_move-pages`
3. **VERIFY** the page is now in correct hierarchy
4. **APOLOGIZE** and explain the correction

#### 🔧 Recovery Commands
```typescript
// Move incorrectly placed work log
mcp_notion_move-pages({
  "page_or_database_ids": ["INCORRECT_PAGE_ID"],
  "new_parent": {
    "page_id": "214ce2a8-927c-80-44-9484-e51c04af048e",
    "type": "page_id"
  }
})
```

### **QUALITY ASSURANCE**

#### ✅ Success Criteria
- Work log appears under SPA 프로젝트(승현)
- Title follows exact naming convention
- Content structure uses purpose-based sections with embedded git information
- Each work unit is clearly separated with proper boundaries
- Sections clearly identify work intent, implementation, and outcomes
- Git commit information is properly nested within each work unit
- User confirms correct placement and organization

#### 📈 Continuous Improvement
- Monitor for any hierarchy placement errors
- Update parent page IDs if workspace structure changes
- Refine section categories based on actual work patterns
- Maintain documentation accuracy and relevance
- Ensure visual separation between work units is consistent

---

## 🎯 SUMMARY IMPERATIVE

**NEVER FORGET**: 
1. **DUPLICATE CHECK FIRST**: Always search for existing work logs before creating new ones
2. Always use parent page ID `214ce2a8-927c-80-44-9484-e51c04af048e` for SPA 프로젝트(승현)
3. Organize work by PURPOSE, not TIME
4. **EMBED GIT INFO**: Include git commit information as H3 subsection within each work unit
5. **SEPARATE WORK UNITS**: Use `---` horizontal rule between different work units
6. Use standard section categories for consistency and searchability
7. **ONE LOG PER DATE**: Never create multiple work logs for the same date

**VERIFICATION MANTRA**: "Search first, parent second, purpose-based sections with embedded git info, clear boundaries always."

**ORGANIZATION PRINCIPLE**: "Intent over time, purpose over chronology, embedded commits over separated sections, clear boundaries over merged content, uniqueness over duplication."

**STRUCTURE MANTRA**: "Each work unit complete and self-contained, git commits nested within work sections, horizontal rules separate work boundaries."

**DUPLICATE PREVENTION MANTRA**: "Before I create, I must search. Before I search, I must get the date. One date, one log, always."

