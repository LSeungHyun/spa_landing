---
description: 
globs: 
alwaysApply: false
---
# 🌐 언어 사용 규칙 (Language Usage Rules)

**기본 언어**: 한국어
- 모든 답변과 설명은 한국어로 제공
- 코드 주석과 변수명은 영어 사용 (개발 표준)
- 기술 문서는 한국어 우선, 필요시 영어 병기

---

<!-- ruleType: always -->

# 🚀 Git Workflow Optimization Rules (Git 워크플로우 최적화 규칙)

**중요**: 모든 답변과 설명은 한국어로 제공해주세요.

## 🎯 목적
사용자가 git 커밋을 요청할 때 효율적이고 간소한 워크플로우를 제공하여 불필요한 대기 시간을 제거합니다.

## ✅ 표준 Git 커밋 워크플로우 (Required)

사용자가 git 커밋을 요청할 때는 **반드시** 다음 순서로만 실행합니다:

### 1. 파일 스테이징
```bash
git add [파일명]
```

### 2. 커밋 생성
```bash
git commit -m "[커밋 메시지]"
```

### 3. 상태 확인 (필요시에만)
```bash
git status
```

## ⛔ 금지 사항 (Required)

### 자동 실행 금지 명령어들
- `git log --oneline`
- `git log --oneline -n`
- `git show`
- `git diff --cached`
- 기타 페이저를 사용하는 git 명령어들

### 🚨 이유
- 이러한 명령어들은 `less` 페이저를 사용하여 `:` 프롬프트에서 멈춤
- 사용자가 수동으로 `q`를 눌러 종료해야 하는 번거로움 발생
- 워크플로우 효율성 저하

## 🔍 예외 상황 (Optional)

다음 경우에만 추가 git 명령어 실행 허용:

1. **사용자가 명시적으로 요청한 경우**
   - "git log 보여줘"
   - "최근 커밋 확인해줘"

2. **에러 발생 시 디버깅 목적**
   - 커밋 실패 시 원인 파악
   - 충돌 해결 과정

3. **페이저 비활성화 옵션 사용**
   ```bash
   git --no-pager log --oneline -3
   ```

## 📋 커밋 메시지 가이드라인 (Recommended)

### 형식
```
type: 간단한 설명

- 상세 변경사항 1
- 상세 변경사항 2
```

### 타입 종류
- `feat:` 새로운 기능
- `fix:` 버그 수정
- `refactor:` 코드 리팩토링
- `style:` 코드 스타일 변경
- `docs:` 문서 변경
- `test:` 테스트 추가/수정

## 🎉 성공 메시지 템플릿

커밋 완료 후 다음과 같이 안내:

```
✅ 커밋 완료!

- 파일: [파일명]
- 메시지: [커밋 메시지]
- 상태: 성공

필요시 'git push'로 원격 저장소에 푸시하세요.
```

## 🔄 워크플로우 체크리스트

- [ ] git add 실행
- [ ] git commit 실행  
- [ ] 성공 메시지 표시
- [ ] git log 자동 실행 **하지 않음**
- [ ] 사용자 요청 시에만 추가 명령어 실행

---

이 규칙을 통해 git 커밋 과정에서 발생하는 불필요한 대기 시간을 제거하고, 더 효율적인 개발 워크플로우를 제공합니다.

