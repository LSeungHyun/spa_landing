---
description: 
globs: 
alwaysApply: false
---
# 🌐 언어 사용 규칙 (Language Usage Rules)

**기본 언어**: 한국어
- 모든 답변과 설명은 한국어로 제공
- 코드 주석과 변수명은 영어 사용 (개발 표준)
- 기술 문서는 한국어 우선, 필요시 영어 병기

---

<!-- ruleType: always -->

# 🚀 Git Workflow Optimization Rules (Git 워크플로우 최적화 규칙)

**중요**: 모든 답변과 설명은 한국어로 제공해주세요.

## 🎯 목적
사용자가 git 커밋을 요청할 때 효율적이고 간소한 워크플로우를 제공하여 불필요한 대기 시간을 제거합니다.

## ✅ 표준 Git 커밋 워크플로우 (Required)

사용자가 git 커밋을 요청할 때는 **반드시** 다음 순서로만 실행합니다:

### 1. 파일 스테이징
```bash
git add [파일명]
```

### 2. 커밋 생성
```bash
git commit -m "[커밋 메시지]"
```

### 3. 상태 확인 (필요시에만)
```bash
git status
```

## 📝 PowerShell 호환 커밋 메시지 규칙 (Required)

### ✅ 안전한 커밋 메시지 형식
- **길이 제한**: 50자 이내 권장, 최대 72자
- **언어**: 한글 우선 (가독성), 길이 초과 시 영어 사용
- **특수문자**: 따옴표, 백슬래시, 파이프 등 PowerShell 특수문자 피하기
- **줄바꿈**: 단일 라인 메시지만 사용

### 📋 권장 커밋 메시지 패턴
```bash
# ✅ 좋은 예시
git commit -m "feat: add user authentication"
git commit -m "fix: resolve login validation error"
git commit -m "refactor: improve code structure"
git commit -m "docs: update README"

# ❌ 피해야 할 예시 (PowerShell 에러 위험)
git commit -m "feat: 사용자 인증 기능 추가 - 로그인/로그아웃 구현 - 세션 관리 개선"
git commit -m "fix: 'user' validation 에러 수정"
```

### 🔧 커밋 메시지 생성 전략
1. **영어로 간단하게**: 핵심 내용만 영어로 작성
2. **타입 프리픽스 사용**: `feat:`, `fix:`, `refactor:`, `docs:` 등
3. **상세 설명 필요시**: 별도 이슈나 PR 설명 활용
4. **PowerShell 테스트**: 복잡한 메시지는 사전 검증

## ⛔ 금지 사항 (Required)

### 자동 실행 금지 명령어들
- `git log --oneline`
- `git log --oneline -n`
- `git show`
- `git diff --cached`
- 기타 페이저를 사용하는 git 명령어들

### 🚨 이유
- 이러한 명령어들은 `less` 페이저를 사용하여 `:` 프롬프트에서 멈춤
- 사용자가 수동으로 `q`를 눌러 종료해야 하는 번거로움 발생
- 워크플로우 효율성 저하

## 🔍 예외 상황 (Optional)

다음 경우에만 추가 git 명령어 실행 허용:

### 1. 사용자 명시적 요청
- "git log 보여줘"
- "커밋 히스토리 확인해줘"
- "최근 변경사항 보여줘"

### 2. 에러 발생 시 디버깅
- 커밋 실패 시 원인 파악
- 충돌 해결 시 상태 확인

### 3. 페이저 비활성화 옵션 사용
```bash
git --no-pager log --oneline -3
```

## 🛡️ 안전장치

### 에러 발생 시 대응
1. **첫 번째 시도 실패**: 영어로 간단한 메시지 재시도
2. **두 번째 시도 실패**: 가장 기본적인 메시지 사용
3. **지속적 실패**: 사용자에게 수동 커밋 요청

### 기본 대체 메시지
```bash
git commit -m "update files"
git commit -m "fix issues"
git commit -m "add features"
```

## 📊 성공 지표

- ✅ 페이저 대기 시간 제거
- ✅ PowerShell 호환성 100%
- ✅ 커밋 실패율 최소화
- ✅ 워크플로우 효율성 향상

---

## 📚 참고사항

이 규칙은 Windows PowerShell 환경에서의 git 사용 최적화를 위해 설계되었습니다. 다른 셸 환경에서는 일부 제한사항이 다를 수 있습니다.





