---
description: 5whys, 문제, 분석
globs: 
alwaysApply: false
---
# 🌐 언어 사용 규칙 (Language Usage Rules)

**기본 언어**: 한국어
- 모든 답변과 설명은 한국어로 제공
- 코드 주석과 변수명은 영어 사용 (개발 표준)
- 기술 문서는 한국어 우선, 필요시 영어 병기

---

<!-- ruleType: requestable -->

# 🔍 5 Whys 분석 방법론

**중요**: 모든 답변과 설명은 한국어로 제공해주세요.

### 5 Whys 기법을 활용한 에러/문제 해결법

### 1. **5 Whys란?**

- "왜?"라는 질문을 5번 이상 반복해 **겉으로 드러난 현상(증상)이 아니라, 진짜 근본 원인(원인 중의 원인)**을 찾아내는 문제 해결 기법입니다.
- 소프트웨어 개발, 운영, 기획 등 다양한 분야에서 많이 활용됩니다.

### 2. **실전 적용 단계별 설명**

1. **문제(에러)를 명확히 정의한다.**
    - 예시: "우리 서비스에 접속이 안 됩니다."
2. **"왜?"라고 묻고, 그 답변에 다시 "왜?"라고 묻는다.**
    - 1차 왜? → "왜 접속이 안 될까?"
        
        → "서버가 다운되어서."
        
    - 2차 왜? → "왜 서버가 다운됐지?"
        
        → "메모리가 부족해서."
        
    - 3차 왜? → "왜 메모리가 부족하지?"
        
        → "백그라운드 프로세스가 메모리를 과다 사용함."
        
    - 4차 왜? → "왜 백그라운드 프로세스가 메모리를 많이 썼지?"
        
        → "메모리 제한을 두지 않고 실행함."
        
    - 5차 왜? → "왜 메모리 제한 없이 실행하게 됐지?"
        
        → "모니터링/경고 시스템이 없었음."
        
3. **최종적으로 나온 '근본 원인'을 해결할 방법을 찾는다.**
    - 예시 해결책:
        - 프로세스별 메모리 제한 설정
        - 시스템 모니터링 및 알림 도입

### 3. **5 Whys를 쓸 때 주의할 점**

- 답변이 단순히 '사람의 실수'로 귀결되면 반복 질문이 부족한 것일 수 있음(시스템, 프로세스, 구조적 원인까지 파고들기).
- 팀에서 여러 사람이 함께 질문을 던지고 토론할수록 더 효과적임.
- 꼭 5번이 아니라, "이제 더 이상 왜?라고 물을 필요가 없는 최종 원인"에 도달할 때까지 반복.

---

## ✅ **요약 – 5 Whys로 에러 해결하는 실전 프로세스**

1. 문제를 명확히 정의
2. "왜?"를 5번 이상 반복
3. 각 답변에 다시 "왜?"
4. 근본 원인 도출
5. 그 원인을 제거하는 구체적인 해결책 실행

---



