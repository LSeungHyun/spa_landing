---
description: 
globs: 
alwaysApply: true
---
# API Development Standards & Security

## üéØ API Philosophy
**Goal**: Build secure, scalable, and maintainable API endpoints
**Standard**: RESTful design with comprehensive error handling and security
**Principle**: Security-first, performance-optimized, developer-friendly APIs

## üîê Security Standards

### **MUST FOLLOW - Security Requirements**

#### 1. **Input Validation & Sanitization**
```typescript
// ‚úÖ CORRECT: Comprehensive input validation
import { z } from 'zod'
import { NextRequest, NextResponse } from 'next/server'

// Define strict schemas
const CreatePromptSchema = z.object({
  title: z.string()
    .min(1, 'Title is required')
    .max(200, 'Title too long')
    .regex(/^[a-zA-Z0-9\s\-_.,!?]+$/, 'Invalid characters in title'),
  content: z.string()
    .min(10, 'Content must be at least 10 characters')
    .max(5000, 'Content too long'),
  tags: z.array(z.string().max(50)).max(10, 'Too many tags'),
  isPublic: z.boolean().default(false),
  userId: z.string().uuid('Invalid user ID format'),
})

const UpdatePromptSchema = CreatePromptSchema.partial().extend({
  id: z.string().uuid('Invalid prompt ID format'),
})

// ‚úÖ CORRECT: Validation middleware
async function validateRequest<T>(
  request: NextRequest,
  schema: z.ZodSchema<T>
): Promise<{ data: T; error: null } | { data: null; error: NextResponse }> {
  try {
    const body = await request.json()
    const data = schema.parse(body)
    return { data, error: null }
  } catch (error) {
    if (error instanceof z.ZodError) {
      return {
        data: null,
        error: NextResponse.json(
          {
            error: 'Validation failed',
            details: error.errors.map(err => ({
              field: err.path.join('.'),
              message: err.message,
              code: err.code,
            })),
          },
          { status: 400 }
        ),
      }
    }
    
    return {
      data: null,
      error: NextResponse.json(
        { error: 'Invalid request format' },
        { status: 400 }
      ),
    }
  }
}

// ‚úÖ CORRECT: Rate limiting with specific limits
import { Ratelimit } from '@upstash/ratelimit'
import { Redis } from '@upstash/redis'

const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL!,
  token: process.env.UPSTASH_REDIS_REST_TOKEN!,
})

// Different rate limits for different endpoints
const rateLimits = {
  generate: new Ratelimit({
    redis,
    limiter: Ratelimit.slidingWindow(10, '1 m'), // 10 requests per minute
    analytics: true,
  }),
  improve: new Ratelimit({
    redis,
    limiter: Ratelimit.slidingWindow(20, '1 m'), // 20 requests per minute
  }),
  auth: new Ratelimit({
    redis,
    limiter: Ratelimit.slidingWindow(5, '1 m'), // 5 auth attempts per minute
  }),
}

async function checkRateLimit(
  identifier: string,
  type: keyof typeof rateLimits
): Promise<{ success: boolean; error?: NextResponse }> {
  const { success, limit, reset, remaining } = await rateLimits[type].limit(identifier)
  
  if (!success) {
    return {
      success: false,
      error: NextResponse.json(
        {
          error: 'Rate limit exceeded',
          limit,
          reset: new Date(reset),
          remaining,
        },
        {
          status: 429,
          headers: {
            'X-RateLimit-Limit': limit.toString(),
            'X-RateLimit-Remaining': remaining.toString(),
            'X-RateLimit-Reset': reset.toString(),
          },
        }
      ),
    }
  }
  
  return { success: true }
}
```

#### 2. **Authentication & Authorization**
```typescript
// ‚úÖ CORRECT: JWT token validation
import jwt from 'jsonwebtoken'
import { createClient } from '@supabase/supabase-js'

interface AuthContext {
  user: {
    id: string
    email: string
    role: 'user' | 'admin' | 'premium'
    subscriptionStatus: 'active' | 'inactive' | 'trial'
  }
  session: {
    id: string
    expiresAt: Date
  }
}

async function authenticateRequest(request: NextRequest): Promise<{
  auth: AuthContext | null
  error: NextResponse | null
}> {
  const authHeader = request.headers.get('authorization')
  
  if (!authHeader?.startsWith('Bearer ')) {
    return {
      auth: null,
      error: NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      ),
    }
  }
  
  const token = authHeader.slice(7)
  
  try {
    // Verify JWT token
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as any
    
    // Fetch user details from Supabase
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )
    
    const { data: user, error } = await supabase
      .from('users')
      .select('id, email, role, subscription_status')
      .eq('id', decoded.sub)
      .single()
    
    if (error || !user) {
      return {
        auth: null,
        error: NextResponse.json(
          { error: 'Invalid token' },
          { status: 401 }
        ),
      }
    }
    
    return {
      auth: {
        user: {
          id: user.id,
          email: user.email,
          role: user.role,
          subscriptionStatus: user.subscription_status,
        },
        session: {
          id: decoded.jti,
          expiresAt: new Date(decoded.exp * 1000),
        },
      },
      error: null,
    }
  } catch (error) {
    return {
      auth: null,
      error: NextResponse.json(
        { error: 'Invalid or expired token' },
        { status: 401 }
      ),
    }
  }
}

// ‚úÖ CORRECT: Role-based authorization
function requireRole(allowedRoles: string[]) {
  return (auth: AuthContext): NextResponse | null => {
    if (!allowedRoles.includes(auth.user.role)) {
      return NextResponse.json(
        { error: 'Insufficient permissions' },
        { status: 403 }
      )
    }
    return null
  }
}

// ‚úÖ CORRECT: Subscription-based access control
function requireSubscription(requiredStatus: string[]) {
  return (auth: AuthContext): NextResponse | null => {
    if (!requiredStatus.includes(auth.user.subscriptionStatus)) {
      return NextResponse.json(
        {
          error: 'Subscription required',
          upgradeUrl: '/pricing',
          currentStatus: auth.user.subscriptionStatus,
        },
        { status: 402 }
      )
    }
    return null
  }
}
```

#### 3. **CORS & Security Headers**
```typescript
// ‚úÖ CORRECT: Comprehensive security headers
function setSecurityHeaders(response: NextResponse): NextResponse {
  // CORS headers
  response.headers.set('Access-Control-Allow-Origin', process.env.ALLOWED_ORIGINS || '*')
  response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With')
  response.headers.set('Access-Control-Max-Age', '86400') // 24 hours
  
  // Security headers
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-XSS-Protection', '1; mode=block')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()')
  
  // Content Security Policy
  response.headers.set(
    'Content-Security-Policy',
    "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';"
  )
  
  return response
}

// ‚úÖ CORRECT: Handle preflight requests
export async function OPTIONS(request: NextRequest) {
  const response = new NextResponse(null, { status: 200 })
  return setSecurityHeaders(response)
}
```

## üì° API Structure & Patterns

### **MUST FOLLOW - RESTful Design**

#### 1. **Standard API Route Structure**
```typescript
// ‚úÖ CORRECT: Complete API route implementation
// app/api/prompts/route.ts
export async function GET(request: NextRequest) {
  try {
    // 1. Rate limiting
    const clientIP = request.ip || 'anonymous'
    const rateCheck = await checkRateLimit(clientIP, 'generate')
    if (!rateCheck.success) return rateCheck.error!
    
    // 2. Authentication (if required)
    const { auth, error: authError } = await authenticateRequest(request)
    if (authError) return authError
    
    // 3. Query parameter validation
    const { searchParams } = new URL(request.url)
    const QuerySchema = z.object({
      page: z.coerce.number().min(1).default(1),
      limit: z.coerce.number().min(1).max(100).default(20),
      search: z.string().optional(),
      category: z.string().optional(),
      sortBy: z.enum(['created_at', 'updated_at', 'popularity']).default('created_at'),
      sortOrder: z.enum(['asc', 'desc']).default('desc'),
    })
    
    const queryValidation = QuerySchema.safeParse({
      page: searchParams.get('page'),
      limit: searchParams.get('limit'),
      search: searchParams.get('search'),
      category: searchParams.get('category'),
      sortBy: searchParams.get('sortBy'),
      sortOrder: searchParams.get('sortOrder'),
    })
    
    if (!queryValidation.success) {
      return NextResponse.json(
        {
          error: 'Invalid query parameters',
          details: queryValidation.error.errors,
        },
        { status: 400 }
      )
    }
    
    const query = queryValidation.data
    
    // 4. Business logic
    const { data: prompts, error: dbError, totalCount } = await getPrompts({
      userId: auth?.user.id,
      ...query,
    })
    
    if (dbError) {
      console.error('Database error:', dbError)
      return NextResponse.json(
        { error: 'Failed to fetch prompts' },
        { status: 500 }
      )
    }
    
    // 5. Response formatting
    const response = NextResponse.json({
      data: prompts,
      pagination: {
        page: query.page,
        limit: query.limit,
        totalCount,
        totalPages: Math.ceil(totalCount / query.limit),
        hasNext: query.page * query.limit < totalCount,
        hasPrev: query.page > 1,
      },
      meta: {
        timestamp: new Date().toISOString(),
        version: '1.0',
      },
    })
    
    // 6. Caching headers
    response.headers.set(
      'Cache-Control',
      'public, s-maxage=60, stale-while-revalidate=300'
    )
    
    return setSecurityHeaders(response)
  } catch (error) {
    console.error('API Error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    // 1. Rate limiting
    const clientIP = request.ip || 'anonymous'
    const rateCheck = await checkRateLimit(clientIP, 'generate')
    if (!rateCheck.success) return rateCheck.error!
    
    // 2. Authentication
    const { auth, error: authError } = await authenticateRequest(request)
    if (authError) return authError
    
    // 3. Subscription check
    const subscriptionCheck = requireSubscription(['active', 'trial'])(auth!)
    if (subscriptionCheck) return subscriptionCheck
    
    // 4. Input validation
    const { data, error: validationError } = await validateRequest(
      request,
      CreatePromptSchema
    )
    if (validationError) return validationError
    
    // 5. Business logic
    const { data: prompt, error: createError } = await createPrompt({
      ...data,
      userId: auth!.user.id,
    })
    
    if (createError) {
      console.error('Create prompt error:', createError)
      return NextResponse.json(
        { error: 'Failed to create prompt' },
        { status: 500 }
      )
    }
    
    // 6. Success response
    const response = NextResponse.json(
      {
        data: prompt,
        message: 'Prompt created successfully',
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0',
        },
      },
      { status: 201 }
    )
    
    return setSecurityHeaders(response)
  } catch (error) {
    console.error('API Error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
```

#### 2. **Error Handling Standards**
```typescript
// ‚úÖ CORRECT: Comprehensive error handling
interface APIError {
  code: string
  message: string
  details?: any
  timestamp: string
  requestId: string
  statusCode: number
}

class APIErrorHandler {
  private static generateRequestId(): string {
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }
  
  static handleError(error: unknown, requestId?: string): NextResponse {
    const id = requestId || this.generateRequestId()
    const timestamp = new Date().toISOString()
    
    // Database errors
    if (error && typeof error === 'object' && 'code' in error) {
      const dbError = error as { code: string; message: string }
      
      switch (dbError.code) {
        case '23505': // Unique violation
          return NextResponse.json({
            code: 'DUPLICATE_RESOURCE',
            message: 'Resource already exists',
            timestamp,
            requestId: id,
          } as APIError, { status: 409 })
          
        case '23503': // Foreign key violation
          return NextResponse.json({
            code: 'INVALID_REFERENCE',
            message: 'Referenced resource does not exist',
            timestamp,
            requestId: id,
          } as APIError, { status: 400 })
          
        case '42501': // Insufficient privilege
          return NextResponse.json({
            code: 'INSUFFICIENT_PERMISSIONS',
            message: 'Access denied',
            timestamp,
            requestId: id,
          } as APIError, { status: 403 })
      }
    }
    
    // Validation errors
    if (error instanceof z.ZodError) {
      return NextResponse.json({
        code: 'VALIDATION_ERROR',
        message: 'Input validation failed',
        details: error.errors.map(err => ({
          field: err.path.join('.'),
          message: err.message,
          code: err.code,
        })),
        timestamp,
        requestId: id,
      } as APIError, { status: 400 })
    }
    
    // Rate limit errors
    if (error && typeof error === 'object' && 'type' in error && error.type === 'rate_limit') {
      return NextResponse.json({
        code: 'RATE_LIMIT_EXCEEDED',
        message: 'Too many requests',
        details: {
          retryAfter: (error as any).retryAfter,
          limit: (error as any).limit,
        },
        timestamp,
        requestId: id,
      } as APIError, { status: 429 })
    }
    
    // External API errors
    if (error && typeof error === 'object' && 'response' in error) {
      const apiError = error as { response: { status: number; data: any } }
      return NextResponse.json({
        code: 'EXTERNAL_API_ERROR',
        message: 'External service error',
        details: {
          status: apiError.response.status,
          service: 'external_api',
        },
        timestamp,
        requestId: id,
      } as APIError, { status: 502 })
    }
    
    // Generic server errors
    console.error('Unhandled API error:', error, { requestId: id })
    
    return NextResponse.json({
      code: 'INTERNAL_ERROR',
      message: 'An unexpected error occurred',
      timestamp,
      requestId: id,
    } as APIError, { status: 500 })
  }
}

// ‚úÖ CORRECT: Error boundary for API routes
export function withErrorHandling<T extends any[]>(
  handler: (...args: T) => Promise<NextResponse>
) {
  return async (...args: T): Promise<NextResponse> => {
    const requestId = APIErrorHandler['generateRequestId']()
    
    try {
      return await handler(...args)
    } catch (error) {
      return APIErrorHandler.handleError(error, requestId)
    }
  }
}

// Usage
export const GET = withErrorHandling(async (request: NextRequest) => {
  // Your API logic here
  return NextResponse.json({ success: true })
})
```

## üîß Data Layer Integration

### **MUST FOLLOW - Database Operations**

#### 1. **Supabase Integration Patterns**
```typescript
// ‚úÖ CORRECT: Type-safe database operations
import { createClient } from '@supabase/supabase-js'
import type { Database } from '@/types/supabase'

type Tables = Database['public']['Tables']
type Prompt = Tables['prompts']['Row']
type PromptInsert = Tables['prompts']['Insert']
type PromptUpdate = Tables['prompts']['Update']

class PromptService {
  private supabase = createClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!
  )
  
  async getPrompts(params: {
    userId?: string
    page: number
    limit: number
    search?: string
    category?: string
    sortBy: string
    sortOrder: 'asc' | 'desc'
  }): Promise<{
    data: Prompt[]
    totalCount: number
    error: null
  } | {
    data: null
    totalCount: 0
    error: string
  }> {
    try {
      let query = this.supabase
        .from('prompts')
        .select('*, categories(name), users(email)', { count: 'exact' })
      
      // Apply filters
      if (params.userId) {
        query = query.eq('user_id', params.userId)
      }
      
      if (params.search) {
        query = query.or(`title.ilike.%${params.search}%,content.ilike.%${params.search}%`)
      }
      
      if (params.category) {
        query = query.eq('categories.name', params.category)
      }
      
      // Apply sorting
      query = query.order(params.sortBy, { ascending: params.sortOrder === 'asc' })
      
      // Apply pagination
      const offset = (params.page - 1) * params.limit
      query = query.range(offset, offset + params.limit - 1)
      
      const { data, count, error } = await query
      
      if (error) {
        console.error('Database error:', error)
        return { data: null, totalCount: 0, error: error.message }
      }
      
      return {
        data: data || [],
        totalCount: count || 0,
        error: null,
      }
    } catch (error) {
      console.error('Service error:', error)
      return {
        data: null,
        totalCount: 0,
        error: 'Failed to fetch prompts',
      }
    }
  }
  
  async createPrompt(data: PromptInsert): Promise<{
    data: Prompt
    error: null
  } | {
    data: null
    error: string
  }> {
    try {
      const { data: prompt, error } = await this.supabase
        .from('prompts')
        .insert(data)
        .select('*, categories(name), users(email)')
        .single()
      
      if (error) {
        console.error('Database error:', error)
        return { data: null, error: error.message }
      }
      
      return { data: prompt, error: null }
    } catch (error) {
      console.error('Service error:', error)
      return { data: null, error: 'Failed to create prompt' }
    }
  }
  
  async updatePrompt(id: string, data: PromptUpdate, userId: string): Promise<{
    data: Prompt
    error: null
  } | {
    data: null
    error: string
  }> {
    try {
      // Check ownership
      const { data: existing, error: checkError } = await this.supabase
        .from('prompts')
        .select('user_id')
        .eq('id', id)
        .single()
      
      if (checkError || !existing) {
        return { data: null, error: 'Prompt not found' }
      }
      
      if (existing.user_id !== userId) {
        return { data: null, error: 'Unauthorized' }
      }
      
      // Perform update
      const { data: prompt, error } = await this.supabase
        .from('prompts')
        .update(data)
        .eq('id', id)
        .select('*, categories(name), users(email)')
        .single()
      
      if (error) {
        console.error('Database error:', error)
        return { data: null, error: error.message }
      }
      
      return { data: prompt, error: null }
    } catch (error) {
      console.error('Service error:', error)
      return { data: null, error: 'Failed to update prompt' }
    }
  }
}

export const promptService = new PromptService()
```

#### 2. **Transaction Management**
```typescript
// ‚úÖ CORRECT: Database transactions
async function createPromptWithAnalytics(
  promptData: PromptInsert,
  userId: string
): Promise<{ success: boolean; data?: any; error?: string }> {
  const supabase = createClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE_KEY!
  )
  
  try {
    // Start transaction using RPC
    const { data, error } = await supabase.rpc('create_prompt_with_analytics', {
      prompt_data: promptData,
      user_id: userId,
    })
    
    if (error) {
      console.error('Transaction error:', error)
      return { success: false, error: error.message }
    }
    
    return { success: true, data }
  } catch (error) {
    console.error('Transaction failed:', error)
    return { success: false, error: 'Transaction failed' }
  }
}

// ‚úÖ CORRECT: Corresponding SQL function (supabase-schema.sql)
/*
CREATE OR REPLACE FUNCTION create_prompt_with_analytics(
  prompt_data jsonb,
  user_id uuid
) RETURNS jsonb AS $$
DECLARE
  new_prompt_id uuid;
  result jsonb;
BEGIN
  -- Insert prompt
  INSERT INTO prompts (title, content, user_id, tags, is_public)
  VALUES (
    (prompt_data->>'title')::text,
    (prompt_data->>'content')::text,
    user_id,
    (prompt_data->>'tags')::text[],
    (prompt_data->>'isPublic')::boolean
  )
  RETURNING id INTO new_prompt_id;
  
  -- Update user analytics
  INSERT INTO user_analytics (user_id, prompts_created, last_activity)
  VALUES (user_id, 1, NOW())
  ON CONFLICT (user_id)
  DO UPDATE SET
    prompts_created = user_analytics.prompts_created + 1,
    last_activity = NOW();
  
  -- Return result
  SELECT to_jsonb(p.*) INTO result
  FROM prompts p
  WHERE p.id = new_prompt_id;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql;
*/
```

## üß™ Testing Standards

### **MUST IMPLEMENT - API Testing**

#### 1. **Unit Tests for API Routes**
```typescript
// ‚úÖ CORRECT: API route testing
// __tests__/api/prompts.test.ts
import { NextRequest } from 'next/server'
import { GET, POST } from '@/app/api/prompts/route'
import { createMocks } from 'node-mocks-http'

// Mock external dependencies
jest.mock('@/lib/supabase', () => ({
  promptService: {
    getPrompts: jest.fn(),
    createPrompt: jest.fn(),
  },
}))

jest.mock('@/lib/auth', () => ({
  authenticateRequest: jest.fn(),
}))

describe('/api/prompts', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })
  
  describe('GET /api/prompts', () => {
    it('should return prompts with valid parameters', async () => {
      const mockPrompts = [
        { id: '1', title: 'Test Prompt', content: 'Test content' },
      ]
      
      ;(promptService.getPrompts as jest.Mock).mockResolvedValue({
        data: mockPrompts,
        totalCount: 1,
        error: null,
      })
      
      const request = new NextRequest('http://localhost:3000/api/prompts?page=1&limit=10')
      const response = await GET(request)
      const data = await response.json()
      
      expect(response.status).toBe(200)
      expect(data.data).toEqual(mockPrompts)
      expect(data.pagination.page).toBe(1)
      expect(data.pagination.limit).toBe(10)
    })
    
    it('should return 400 for invalid query parameters', async () => {
      const request = new NextRequest('http://localhost:3000/api/prompts?page=0&limit=1000')
      const response = await GET(request)
      const data = await response.json()
      
      expect(response.status).toBe(400)
      expect(data.error).toBe('Invalid query parameters')
      expect(data.details).toBeDefined()
    })
    
    it('should handle database errors gracefully', async () => {
      ;(promptService.getPrompts as jest.Mock).mockResolvedValue({
        data: null,
        totalCount: 0,
        error: 'Database connection failed',
      })
      
      const request = new NextRequest('http://localhost:3000/api/prompts')
      const response = await GET(request)
      const data = await response.json()
      
      expect(response.status).toBe(500)
      expect(data.error).toBe('Failed to fetch prompts')
    })
  })
  
  describe('POST /api/prompts', () => {
    const validPromptData = {
      title: 'Test Prompt',
      content: 'This is a test prompt content',
      tags: ['test', 'example'],
      isPublic: false,
      userId: '123e4567-e89b-12d3-a456-426614174000',
    }
    
    it('should create prompt with valid data', async () => {
      const mockAuth = {
        user: {
          id: '123e4567-e89b-12d3-a456-426614174000',
          email: 'test@example.com',
          role: 'user',
          subscriptionStatus: 'active',
        },
        session: { id: 'session123', expiresAt: new Date() },
      }
      
      ;(authenticateRequest as jest.Mock).mockResolvedValue({
        auth: mockAuth,
        error: null,
      })
      
      ;(promptService.createPrompt as jest.Mock).mockResolvedValue({
        data: { id: 'prompt123', ...validPromptData },
        error: null,
      })
      
      const request = new NextRequest('http://localhost:3000/api/prompts', {
        method: 'POST',
        body: JSON.stringify(validPromptData),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer valid-token',
        },
      })
      
      const response = await POST(request)
      const data = await response.json()
      
      expect(response.status).toBe(201)
      expect(data.message).toBe('Prompt created successfully')
      expect(data.data.id).toBe('prompt123')
    })
    
    it('should return 401 for unauthenticated requests', async () => {
      ;(authenticateRequest as jest.Mock).mockResolvedValue({
        auth: null,
        error: new NextResponse(
          JSON.stringify({ error: 'Authentication required' }),
          { status: 401 }
        ),
      })
      
      const request = new NextRequest('http://localhost:3000/api/prompts', {
        method: 'POST',
        body: JSON.stringify(validPromptData),
        headers: { 'Content-Type': 'application/json' },
      })
      
      const response = await POST(request)
      
      expect(response.status).toBe(401)
    })
    
    it('should return 400 for invalid data', async () => {
      const invalidData = { title: '', content: 'x' } // Invalid: empty title, content too short
      
      const request = new NextRequest('http://localhost:3000/api/prompts', {
        method: 'POST',
        body: JSON.stringify(invalidData),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer valid-token',
        },
      })
      
      const response = await POST(request)
      const data = await response.json()
      
      expect(response.status).toBe(400)
      expect(data.error).toBe('Validation failed')
      expect(data.details).toHaveLength(2) // Two validation errors
    })
  })
})
```

#### 2. **Integration Tests**
```typescript
// ‚úÖ CORRECT: Integration testing
// __tests__/integration/api.test.ts
import { createClient } from '@supabase/supabase-js'
import { testClient } from '@/lib/test-utils'

describe('API Integration Tests', () => {
  let supabase: ReturnType<typeof createClient>
  let testUserId: string
  let authToken: string
  
  beforeAll(async () => {
    // Setup test database
    supabase = createClient(
      process.env.TEST_SUPABASE_URL!,
      process.env.TEST_SUPABASE_ANON_KEY!
    )
    
    // Create test user
    const { data: authData } = await supabase.auth.signUp({
      email: 'test@example.com',
      password: 'testpassword123',
    })
    
    testUserId = authData.user!.id
    authToken = authData.session!.access_token
  })
  
  afterAll(async () => {
    // Cleanup test data
    await supabase.from('prompts').delete().eq('user_id', testUserId)
    await supabase.auth.signOut()
  })
  
  describe('Prompt Management Flow', () => {
    let createdPromptId: string
    
    it('should create, read, update, and delete a prompt', async () => {
      // CREATE
      const createResponse = await fetch('http://localhost:3000/api/prompts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`,
        },
        body: JSON.stringify({
          title: 'Integration Test Prompt',
          content: 'This is a test prompt for integration testing',
          tags: ['test', 'integration'],
          isPublic: false,
        }),
      })
      
      expect(createResponse.status).toBe(201)
      const createData = await createResponse.json()
      createdPromptId = createData.data.id
      
      // READ
      const readResponse = await fetch(
        `http://localhost:3000/api/prompts/${createdPromptId}`,
        {
          headers: { 'Authorization': `Bearer ${authToken}` },
        }
      )
      
      expect(readResponse.status).toBe(200)
      const readData = await readResponse.json()
      expect(readData.data.title).toBe('Integration Test Prompt')
      
      // UPDATE
      const updateResponse = await fetch(
        `http://localhost:3000/api/prompts/${createdPromptId}`,
        {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`,
          },
          body: JSON.stringify({
            title: 'Updated Integration Test Prompt',
          }),
        }
      )
      
      expect(updateResponse.status).toBe(200)
      const updateData = await updateResponse.json()
      expect(updateData.data.title).toBe('Updated Integration Test Prompt')
      
      // DELETE
      const deleteResponse = await fetch(
        `http://localhost:3000/api/prompts/${createdPromptId}`,
        {
          method: 'DELETE',
          headers: { 'Authorization': `Bearer ${authToken}` },
        }
      )
      
      expect(deleteResponse.status).toBe(204)
    })
  })
})
```

## üìä Monitoring & Logging

### **MUST IMPLEMENT - API Monitoring**

#### 1. **Structured Logging**
```typescript
// ‚úÖ CORRECT: Structured logging system
interface LogContext {
  requestId: string
  userId?: string
  method: string
  url: string
  userAgent?: string
  ip?: string
  timestamp: string
}

interface LogData {
  level: 'info' | 'warn' | 'error' | 'debug'
  message: string
  context: LogContext
  data?: any
  error?: Error
  duration?: number
}

class Logger {
  private static formatLog(logData: LogData): string {
    return JSON.stringify({
      ...logData,
      error: logData.error ? {
        name: logData.error.name,
        message: logData.error.message,
        stack: logData.error.stack,
      } : undefined,
    })
  }
  
  static info(message: string, context: LogContext, data?: any): void {
    console.log(this.formatLog({ level: 'info', message, context, data }))
  }
  
  static warn(message: string, context: LogContext, data?: any): void {
    console.warn(this.formatLog({ level: 'warn', message, context, data }))
  }
  
  static error(message: string, context: LogContext, error?: Error, data?: any): void {
    console.error(this.formatLog({ level: 'error', message, context, error, data }))
  }
  
  static debug(message: string, context: LogContext, data?: any): void {
    if (process.env.NODE_ENV === 'development') {
      console.debug(this.formatLog({ level: 'debug', message, context, data }))
    }
  }
}

// ‚úÖ CORRECT: Request logging middleware
export function withLogging<T extends any[]>(
  handler: (...args: T) => Promise<NextResponse>
) {
  return async (...args: T): Promise<NextResponse> => {
    const request = args[0] as NextRequest
    const startTime = Date.now()
    const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    
    const context: LogContext = {
      requestId,
      method: request.method,
      url: request.url,
      userAgent: request.headers.get('user-agent') || undefined,
      ip: request.ip || undefined,
      timestamp: new Date().toISOString(),
    }
    
    Logger.info('Request started', context)
    
    try {
      const response = await handler(...args)
      const duration = Date.now() - startTime
      
      Logger.info('Request completed', context, {
        status: response.status,
        duration,
      })
      
      return response
    } catch (error) {
      const duration = Date.now() - startTime
      
      Logger.error('Request failed', context, error as Error, {
        duration,
      })
      
      throw error
    }
  }
}
```

#### 2. **Performance Monitoring**
```typescript
// ‚úÖ CORRECT: API performance monitoring
interface PerformanceMetrics {
  endpoint: string
  method: string
  duration: number
  status: number
  timestamp: string
  userId?: string
  error?: string
}

class APIMetrics {
  private static metrics: PerformanceMetrics[] = []
  
  static record(metric: PerformanceMetrics): void {
    this.metrics.push(metric)
    
    // Send to analytics service
    if (process.env.NODE_ENV === 'production') {
      this.sendToAnalytics(metric)
    }
    
    // Alert on slow requests
    if (metric.duration > 5000) { // 5 seconds
      Logger.warn('Slow API request detected', {
        requestId: `perf_${Date.now()}`,
        method: metric.method,
        url: metric.endpoint,
        timestamp: metric.timestamp,
      }, { duration: metric.duration })
    }
    
    // Cleanup old metrics (keep last 1000)
    if (this.metrics.length > 1000) {
      this.metrics = this.metrics.slice(-1000)
    }
  }
  
  private static async sendToAnalytics(metric: PerformanceMetrics): Promise<void> {
    try {
      // Send to your analytics service (e.g., PostHog, Mixpanel, etc.)
      await fetch(process.env.ANALYTICS_ENDPOINT!, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          event: 'api_request',
          properties: metric,
        }),
      })
    } catch (error) {
      Logger.error('Failed to send analytics', {
        requestId: `analytics_${Date.now()}`,
        method: 'POST',
        url: process.env.ANALYTICS_ENDPOINT!,
        timestamp: new Date().toISOString(),
      }, error as Error)
    }
  }
  
  static getMetrics(): PerformanceMetrics[] {
    return [...this.metrics]
  }
  
  static getAverageResponseTime(endpoint?: string): number {
    const filteredMetrics = endpoint
      ? this.metrics.filter(m => m.endpoint === endpoint)
      : this.metrics
    
    if (filteredMetrics.length === 0) return 0
    
    const total = filteredMetrics.reduce((sum, m) => sum + m.duration, 0)
    return total / filteredMetrics.length
  }
}

// ‚úÖ CORRECT: Performance monitoring middleware
export function withPerformanceMonitoring<T extends any[]>(
  handler: (...args: T) => Promise<NextResponse>
) {
  return async (...args: T): Promise<NextResponse> => {
    const request = args[0] as NextRequest
    const startTime = Date.now()
    
    try {
      const response = await handler(...args)
      const duration = Date.now() - startTime
      
      APIMetrics.record({
        endpoint: new URL(request.url).pathname,
        method: request.method,
        duration,
        status: response.status,
        timestamp: new Date().toISOString(),
        userId: request.headers.get('x-user-id') || undefined,
      })
      
      return response
    } catch (error) {
      const duration = Date.now() - startTime
      
      APIMetrics.record({
        endpoint: new URL(request.url).pathname,
        method: request.method,
        duration,
        status: 500,
        timestamp: new Date().toISOString(),
        userId: request.headers.get('x-user-id') || undefined,
        error: (error as Error).message,
      })
      
      throw error
    }
  }
}
```

## üö´ API Anti-Patterns

### **NEVER DO - Common Mistakes**

#### 1. **Security Vulnerabilities**
```typescript
// ‚ùå WRONG: No input validation
export async function POST(request: NextRequest) {
  const body = await request.json()
  // Directly using user input without validation!
  const result = await db.query(`SELECT * FROM users WHERE id = ${body.userId}`)
  return NextResponse.json(result)
}

// ‚ùå WRONG: Exposing sensitive data
export async function GET() {
  const users = await db.query('SELECT * FROM users')
  // Returning passwords and sensitive data!
  return NextResponse.json(users)
}

// ‚ùå WRONG: No rate limiting
export async function POST(request: NextRequest) {
  // Anyone can spam this endpoint!
  const result = await expensiveOperation()
  return NextResponse.json(result)
}

// ‚úÖ CORRECT: Secure implementation
export async function POST(request: NextRequest) {
  // Rate limiting
  const rateCheck = await checkRateLimit(request.ip, 'api')
  if (!rateCheck.success) return rateCheck.error
  
  // Authentication
  const { auth, error } = await authenticateRequest(request)
  if (error) return error
  
  // Input validation
  const { data, error: validationError } = await validateRequest(request, schema)
  if (validationError) return validationError
  
  // Secure database query
  const result = await db.from('users')
    .select('id, email, created_at') // Only select needed fields
    .eq('id', data.userId)
    .single()
  
  return NextResponse.json(result)
}
```

#### 2. **Poor Error Handling**
```typescript
// ‚ùå WRONG: Exposing internal errors
export async function GET() {
  try {
    const data = await database.query('SELECT * FROM sensitive_table')
    return NextResponse.json(data)
  } catch (error) {
    // Exposing database errors to client!
    return NextResponse.json({ error: error.message }, { status: 500 })
  }
}

// ‚ùå WRONG: No error logging
export async function POST(request: NextRequest) {
  try {
    // Some operation
  } catch (error) {
    // Silent failure - no logging!
    return NextResponse.json({ error: 'Something went wrong' })
  }
}

// ‚úÖ CORRECT: Proper error handling
export async function GET() {
  try {
    const data = await database.query('SELECT * FROM sensitive_table')
    return NextResponse.json(data)
  } catch (error) {
    // Log the actual error
    Logger.error('Database query failed', context, error as Error)
    
    // Return generic error to client
    return NextResponse.json(
      { error: 'Failed to fetch data' },
      { status: 500 }
    )
  }
}
```

---

*Remember: API security and reliability are non-negotiable. Always validate input, authenticate users, handle errors gracefully, and monitor performance in production.*

