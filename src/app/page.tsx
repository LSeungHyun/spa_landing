'use client';

import { useState, useEffect, useRef } from 'react';
import { toast } from 'sonner';
import { Container } from '@/components/ui/container';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Send, Wand2, Loader2, Sparkles, Users, Star, ArrowRight, CheckCircle, Menu, X, Mail, Gift, Zap } from 'lucide-react';
import { cn } from '@/lib/utils';
import { MobileNavBar } from '@/components/layout/mobile-nav-bar';
import { EnhancedPreRegistrationForm } from '@/components/shared/enhanced-pre-registration-form';

interface ChatMessage {
    id: string;
    type: 'user' | 'ai';
    content: string;
    timestamp: Date;
}

export default function HomePage() {
    const [inputText, setInputText] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isMounted, setIsMounted] = useState(false);
    const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
    const [showPreRegistration, setShowPreRegistration] = useState(false);
    const [email, setEmail] = useState('');
    const [isRegistering, setIsRegistering] = useState(false);
    const [hasTriedDemo, setHasTriedDemo] = useState(false);
    const [improveCount, setImproveCount] = useState(0);
    const demoRef = useRef<HTMLDivElement>(null);
    const preRegRef = useRef<HTMLDivElement>(null);

    const [chatMessages, setChatMessages] = useState<ChatMessage[]>([
        {
            id: '1',
            type: 'ai',
            content: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî SPA(Smart Prompt Assistant)ÏûÖÎãàÎã§. ÏïÑÎûò ÏÉòÌîåÏùÑ ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò ÏßÅÏ†ë ÏûÖÎ†•Ìï¥ÏÑú ÌîÑÎ°¨ÌîÑÌä∏ Í∞úÏÑ† Ìö®Í≥ºÎ•º Î∞îÎ°ú Ï≤¥ÌóòÌï¥Î≥¥ÏÑ∏Ïöî! üöÄ',
            timestamp: new Date()
        }
    ]);

    // Hydration ÏïàÏ†ÑÏÑ±ÏùÑ ÏúÑÌïú useEffect
    useEffect(() => {
        setIsMounted(true);
    }, []);

    // 3Ìöå Ï≤¥Ìóò ÌõÑ ÏûêÎèôÏúºÎ°ú ÏÇ¨Ï†Ñ Îì±Î°ù Ïú†ÎèÑ
    useEffect(() => {
        if (improveCount >= 2 && !showPreRegistration) {
            setTimeout(() => {
                setShowPreRegistration(true);
                preRegRef.current?.scrollIntoView({ behavior: 'smooth' });
            }, 1000);
        }
    }, [improveCount, showPreRegistration]);

    // ÏÉòÌîå ÌîÑÎ°¨ÌîÑÌä∏ - Ï¶âÏãú Ï≤¥Ìóò Ïú†ÎèÑ
    const samplePrompts = [
        "Í≥†Í∞ùÏóêÍ≤å Ï†úÌíà ÏÜåÍ∞ú Ïù¥Î©îÏùºÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî",
        "ÎßàÏºÄÌåÖ Ï∫†ÌéòÏù∏ ÏïÑÏù¥ÎîîÏñ¥Î•º Î∏åÎ†àÏù∏Ïä§ÌÜ†Î∞çÌï¥Ï£ºÏÑ∏Ïöî",
        "ÌöåÏùòÎ°ùÏùÑ Ï†ïÎ¶¨ÌïòÍ≥† Ïï°ÏÖò ÏïÑÏù¥ÌÖúÏùÑ Ï∂îÏ∂úÌï¥Ï£ºÏÑ∏Ïöî",
        "Î∏îÎ°úÍ∑∏ Ìè¨Ïä§Ìä∏ Í∞úÏöîÎ•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî"
    ];

    const handleSampleClick = (sample: string) => {
        setInputText(sample);
        // ÏÉòÌîå ÌÅ¥Î¶≠ Ïãú ÏûêÎèôÏúºÎ°ú Îç∞Î™® ÏÑπÏÖòÏúºÎ°ú Ïä§ÌÅ¨Î°§
        setTimeout(() => {
            demoRef.current?.scrollIntoView({ behavior: 'smooth' });
        }, 100);
    };

    const handleImprovePrompt = async () => {
        if (!inputText.trim()) {
            toast.error('ÌîÑÎ°¨ÌîÑÌä∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî');
            return;
        }

        setIsLoading(true);
        setHasTriedDemo(true);

        try {
            // Ïã§Ï†úÏ†ÅÏù∏ ÌîÑÎ°¨ÌîÑÌä∏ Í∞úÏÑ† Î°úÏßÅ
            await new Promise(resolve => setTimeout(resolve, 1500)); // Î¶¨ÏñºÌïú Î°úÎî© ÏãúÍ∞Ñ

            const improvedPrompt = `${inputText}

[Í∞úÏÑ†Îêú ÌîÑÎ°¨ÌîÑÌä∏]
ÏúÑ ÏöîÏ≤≠ÏùÑ Îã§ÏùåÍ≥º Í∞ôÏù¥ Íµ¨Ï≤¥ÌôîÌïòÏó¨ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:

1. Î™©Ï†Å: ${inputText.includes('Ïù¥Î©îÏùº') ? 'Í≥†Í∞ù Í¥ÄÍ≥Ñ Í∞ïÌôî Î∞è Ï†úÌíà Í∞ÄÏπò Ï†ÑÎã¨' : 'Î™ÖÌôïÌïú Î™©Ìëú Îã¨ÏÑ±'}
2. ÎåÄÏÉÅ: ${inputText.includes('Í≥†Í∞ù') ? 'Í∏∞Ï°¥ Í≥†Í∞ù Î∞è Ïû†Ïû¨ Í≥†Í∞ù' : 'Í¥ÄÎ†® Ïù¥Ìï¥Í¥ÄÍ≥ÑÏûê'}
3. ÌÜ§Ïï§Îß§ÎÑà: Ï†ÑÎ¨∏Ï†ÅÏù¥Î©¥ÏÑú ÏπúÍ∑ºÌïú Ïñ¥Ï°∞
4. Íµ¨Ï°∞: ÎèÑÏûÖ - ÌïµÏã¨ ÎÇ¥Ïö© - ÌñâÎèô Ïú†ÎèÑ ÏàúÏÑú
5. Í∏∏Ïù¥: ${inputText.includes('Ïù¥Î©îÏùº') ? '200-300Îã®Ïñ¥' : 'Ï†ÅÏ†àÌïú Î∂ÑÎüâ'}
6. Ìè¨Ìï® ÏöîÏÜå: Íµ¨Ï≤¥Ï†ÅÏù∏ ÏòàÏãúÏôÄ Ïã§Ìñâ Í∞ÄÎä•Ìïú Ïï°ÏÖò ÏïÑÏù¥ÌÖú

Ïù¥ Í∞ÄÏù¥ÎìúÎùºÏù∏ÏùÑ Î∞îÌÉïÏúºÎ°ú ${inputText}Î•º ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.`;

            setInputText(improvedPrompt);
            setImproveCount(prev => prev + 1);
            
            // Í∞úÏÑ† ÌöüÏàòÏóê Îî∞Î•∏ Ï∞®Î≥ÑÌôîÎêú Î©îÏãúÏßÄ
            if (improveCount === 0) {
                toast.success('üéâ ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä 10Î∞∞ Îçî Íµ¨Ï≤¥Ìï¥Ï°åÏñ¥Ïöî!');
            } else if (improveCount === 1) {
                toast.success('üî• Îòê Îã§Î•∏ ÌîÑÎ°¨ÌîÑÌä∏ÎèÑ Í∞úÏÑ†Ìï¥Î≥¥ÏÑ∏Ïöî!');
            } else {
                toast.success('‚ú® ÏôÑÎ≤ΩÌï¥Ïöî! Ïù¥Ï†ú Î¨¥Ï†úÌïú ÏÇ¨Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî!');
            }

        } catch (error) {
            toast.error('ÌîÑÎ°¨ÌîÑÌä∏ Ìñ•ÏÉÅÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
            console.error(error);
        } finally {
            setIsLoading(false);
        }
    };

    const handleSendMessage = () => {
        if (!inputText.trim()) return;

        const userMessage: ChatMessage = {
            id: Date.now().toString(),
            type: 'user',
            content: inputText,
            timestamp: new Date()
        };

        setChatMessages(prev => [...prev, userMessage]);

        // AI ÏùëÎãµ ÏãúÎÆ¨Î†àÏù¥ÏÖò
        setTimeout(() => {
            const responses = [
                'ÎÑ§, Ïù¥Ìï¥ÌñàÏäµÎãàÎã§. Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ ÏöîÍµ¨ÏÇ¨Ìï≠Ïù¥ ÏûàÏúºÏãúÎ©¥ ÎßêÏîÄÌï¥Ï£ºÏÑ∏Ïöî!',
                'Ï¢ãÏùÄ ÌîÑÎ°¨ÌîÑÌä∏ÎÑ§Ïöî! Ïù¥Îü∞ ÏãùÏúºÎ°ú ÏûëÏÑ±ÌïòÎ©¥ AIÍ∞Ä Îçî Ï†ïÌôïÌïú ÎãµÎ≥ÄÏùÑ ÎìúÎ¶¥ Ïàò ÏûàÏñ¥Ïöî.',
                'ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä Ìõ®Ïî¨ Î™ÖÌôïÌï¥Ï°åÏñ¥Ïöî. Ïã§Ï†úÎ°ú ÏÇ¨Ïö©Ìï¥Î≥¥ÏãúÎ©¥ Ï∞®Ïù¥Î•º ÎäêÎÅºÏã§ Í±∞ÏòàÏöî!'
            ];
            
            const aiMessage: ChatMessage = {
                id: (Date.now() + 1).toString(),
                type: 'ai',
                content: responses[Math.floor(Math.random() * responses.length)],
                timestamp: new Date()
            };
            setChatMessages(prev => [...prev, aiMessage]);
        }, 1000);

        setInputText('');
    };

    // Ïã§Ï†ú APIÎ•º ÏÇ¨Ïö©ÌïòÎäî ÏÇ¨Ï†Ñ Îì±Î°ù Ìï®Ïàò
    const handlePreRegistration = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!email.trim()) {
            toast.error('Ïù¥Î©îÏùºÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî');
            return;
        }

        setIsRegistering(true);

        try {
            const response = await fetch('/api/pre-register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: email.trim(),
                }),
            });

            const data = await response.json();

            if (response.ok) {
                toast.success('üéâ ÏÇ¨Ï†Ñ Îì±Î°ù ÏôÑÎ£å! Ï∂úÏãú ÏïåÎ¶ºÏùÑ Î∞õÏúºÏã§ Í±∞ÏòàÏöî.');
                setEmail('');
                
                // ÏÑ±Í≥µ ÌõÑ Í∞êÏÇ¨ Î©îÏãúÏßÄ
                setTimeout(() => {
                    toast.success('üéÅ ÏñºÎ¶¨Î≤ÑÎìú ÌòúÌÉùÏù¥ Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§!');
                }, 1500);
            } else if (response.status === 409) {
                toast.error(data.error || 'Ïù¥ÎØ∏ Îì±Î°ùÎêú Ïù¥Î©îÏùºÏûÖÎãàÎã§');
            } else {
                toast.error(data.error || 'Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
            }

        } catch (error) {
            console.error('Registration error:', error);
            toast.error('ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        } finally {
            setIsRegistering(false);
        }
    };

    const handleEnhancedRegistrationSuccess = (data: any) => {
        setShowPreRegistration(false);
        toast.success('üéâ ÏÇ¨Ï†Ñ Îì±Î°ùÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
    };

    const scrollToDemo = () => {
        demoRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    // ÏÇ¨Ï†Ñ Îì±Î°ù ÏÑπÏÖòÏúºÎ°ú Ïä§ÌÅ¨Î°§ÌïòÎäî Ìï®Ïàò
    const scrollToPreRegistration = () => {
        if (!showPreRegistration) {
            setShowPreRegistration(true);
        }
        setTimeout(() => {
            preRegRef.current?.scrollIntoView({ behavior: 'smooth' });
        }, 100);
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 smooth-scroll">
            {/* Header */}
            <header className="border-b border-white/10 bg-slate-900/90 backdrop-blur-xl fixed top-0 w-full z-50">
                <Container>
                    <div className="flex items-center justify-between h-16">
                        <div className="flex items-center space-x-3">
                            <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                                <Sparkles className="w-6 h-6 text-white" />
                            </div>
                            <div className="hidden sm:block">
                                <span className="font-bold text-xl text-white">Smart Prompt Assistant</span>
                                <div className="text-xs text-blue-300">AIÎ°ú Îçî Ïä§ÎßàÌä∏Ìïú ÌîÑÎ°¨ÌîÑÌä∏Î•º</div>
                            </div>
                            <div className="sm:hidden">
                                <span className="font-bold text-lg text-white">SPA</span>
                            </div>
                        </div>

                        {/* Desktop Navigation */}
                        <nav className="hidden md:flex items-center space-x-6">
                            <button 
                                onClick={scrollToDemo}
                                className="text-blue-200 hover:text-white transition-colors text-sm font-medium"
                            >
                                Ï≤¥ÌóòÌïòÍ∏∞
                            </button>
                            <button 
                                onClick={scrollToPreRegistration}
                                className="text-blue-200 hover:text-white transition-colors text-sm font-medium"
                            >
                                ÏÇ¨Ï†ÑÎì±Î°ù
                            </button>
                            <Button 
                                variant="outline" 
                                size="sm" 
                                className="border-blue-400 text-blue-400 hover:bg-blue-400 hover:text-white"
                            >
                                Î°úÍ∑∏Ïù∏
                            </Button>
                        </nav>

                        {/* Mobile Menu Button */}
                        <button
                            className="md:hidden p-2 text-white"
                            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                            aria-label="Î©îÎâ¥ Ïó¥Í∏∞"
                        >
                            {mobileMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
                        </button>
                    </div>

                    {/* Mobile Menu */}
                    {mobileMenuOpen && (
                        <div className="md:hidden border-t border-white/10 py-4 animate-slide-down">
                            <nav className="flex flex-col space-y-4">
                                <button 
                                    onClick={() => {
                                        scrollToDemo();
                                        setMobileMenuOpen(false);
                                    }}
                                    className="text-blue-200 hover:text-white transition-colors text-sm font-medium text-left"
                                >
                                    Ï≤¥ÌóòÌïòÍ∏∞
                                </button>
                                <button 
                                    onClick={() => {
                                        scrollToPreRegistration();
                                        setMobileMenuOpen(false);
                                    }}
                                    className="text-blue-200 hover:text-white transition-colors text-sm font-medium text-left"
                                >
                                    ÏÇ¨Ï†ÑÎì±Î°ù
                                </button>
                                <Button 
                                    variant="outline" 
                                    size="sm" 
                                    className="border-blue-400 text-blue-400 hover:bg-blue-400 hover:text-white w-fit"
                                >
                                    Î°úÍ∑∏Ïù∏
                                </Button>
                            </nav>
                        </div>
                    )}
                </Container>
            </header>

            {/* Hero Section */}
            <section data-section="hero" className="pt-24 pb-12 px-4 sm:px-6 lg:px-8 text-center">
                <Container>
                    <div className="max-w-4xl mx-auto">
                        <div className="space-y-8">
                            {/* Î©îÏù∏ Ìó§ÎìúÎùºÏù∏ */}
                            <div className="space-y-4 animate-fade-in">
                                <div className="inline-flex items-center space-x-2 bg-blue-500/20 text-blue-300 px-4 py-2 rounded-full text-sm font-medium">
                                    <Zap className="w-4 h-4" />
                                    <span>AI ÌîÑÎ°¨ÌîÑÌä∏ ÏµúÏ†ÅÌôî ÎèÑÍµ¨</span>
                                </div>
                                <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold text-white leading-tight">
                                    ÌîÑÎ°¨ÌîÑÌä∏Î•º <span className="bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">10Î∞∞ Îçî Ïä§ÎßàÌä∏</span>ÌïòÍ≤å
                                </h1>
                                <p className="text-xl sm:text-2xl text-blue-100 max-w-3xl mx-auto leading-relaxed">
                                    AIÏôÄ ÎåÄÌôîÌï† Îïå Îçî Ï†ïÌôïÌïòÍ≥† Ïú†Ïö©Ìïú ÎãµÎ≥ÄÏùÑ ÏñªÎäî ÎπÑÎ∞Ä, 
                                    <strong className="text-white"> Î∞îÎ°ú ÌîÑÎ°¨ÌîÑÌä∏ ÏûëÏÑ±Î≤ï</strong>ÏûÖÎãàÎã§.
                                </p>
                            </div>

                            {/* CTA Î≤ÑÌäºÎì§ */}
                            <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4 animate-slide-up">
                                <Button 
                                    onClick={scrollToDemo}
                                    size="lg" 
                                    className="w-full sm:w-auto bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold px-8 py-4 rounded-xl shadow-xl transform hover:scale-105 transition-all duration-200 focus-visible-enhanced"
                                >
                                    <Wand2 className="w-5 h-5 mr-2" />
                                    ÏßÄÍ∏à Î∞îÎ°ú Ï≤¥ÌóòÌïòÍ∏∞
                                </Button>
                                <Button 
                                    onClick={scrollToPreRegistration}
                                    variant="outline" 
                                    size="lg" 
                                    className="w-full sm:w-auto border-2 border-blue-400 text-blue-400 hover:bg-blue-400 hover:text-white px-8 py-4 rounded-xl font-semibold transition-all duration-200"
                                >
                                    <Gift className="w-5 h-5 mr-2" />
                                    Î¨¥Î£å ÏÇ¨Ï†Ñ Îì±Î°ù
                                </Button>
                            </div>

                            {/* ÏÇ¨ÌöåÏ†Å Ï¶ùÍ±∞ */}
                            <div className="flex items-center justify-center space-x-8 text-blue-200 text-sm animate-fade-in-delayed">
                                <div className="flex items-center space-x-2">
                                    <Users className="w-4 h-4" />
                                    <span>1,247Î™Ö ÏÇ¨Ï†Ñ Îì±Î°ù</span>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <Star className="w-4 h-4 text-yellow-400" />
                                    <span>4.9/5 ÎßåÏ°±ÎèÑ</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </Container>
            </section>

            {/* Demo Section */}
            <section ref={demoRef} data-section="demo" className="py-16 px-4 sm:px-6 lg:px-8">
                <Container>
                    <div className="max-w-4xl mx-auto">
                        {/* ÏÑπÏÖò Ìó§Îçî */}
                        <div className="text-center mb-12">
                            <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">
                                3Ï¥àÎßåÏóê ÌîÑÎ°¨ÌîÑÌä∏ Í∞úÏÑ† Ï≤¥Ìóò üöÄ
                            </h2>
                            <p className="text-xl text-blue-100 max-w-2xl mx-auto">
                                ÏÉòÌîåÏùÑ ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò ÏßÅÏ†ë ÏûÖÎ†•Ìï¥ÏÑú AIÍ∞Ä Ïñ¥ÎñªÍ≤å ÌîÑÎ°¨ÌîÑÌä∏Î•º Í∞úÏÑ†ÌïòÎäîÏßÄ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî
                            </p>
                        </div>

                        {/* ÏûÖÎ†• ÏÑπÏÖò - ChatGPT Ïä§ÌÉÄÏùº */}
                        <div className="bg-white/95 backdrop-blur-sm rounded-2xl shadow-xl border border-gray-200/50 animate-slide-up overflow-hidden">
                            {/* ÏûÖÎ†• ÏòÅÏó≠ Ìó§Îçî */}
                            <div className="bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-3 border-b border-gray-200/50">
                                <div className="flex items-center justify-between">
                                    <h4 className="font-medium text-gray-900">ÌîÑÎ°¨ÌîÑÌä∏ ÏûÖÎ†•</h4>
                                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                                        <Wand2 className="w-4 h-4" />
                                        <span>AI Í∞úÏÑ† Ï§ÄÎπÑÎê®</span>
                                    </div>
                                </div>
                            </div>

                            {/* ÏûÖÎ†• ÌïÑÎìú */}
                            <div className="p-6">
                                <div className="relative">
                                    <label htmlFor="prompt-input" className="sr-only">
                                        ÌîÑÎ°¨ÌîÑÌä∏ ÏûÖÎ†•
                                    </label>
                                    <div className="relative bg-gray-50 rounded-xl border border-gray-200 focus-within:border-blue-500 focus-within:ring-2 focus-within:ring-blue-500/20 transition-all duration-200 chat-input-container">
                                        <textarea
                                            id="prompt-input"
                                            value={inputText}
                                            onChange={(e) => setInputText(e.target.value)}
                                            placeholder="Í∞úÏÑ†ÌïòÍ≥† Ïã∂ÏùÄ ÌîÑÎ°¨ÌîÑÌä∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                                            className={cn(
                                                "w-full min-h-[120px] sm:min-h-[140px] p-4 pr-16 bg-transparent border-none",
                                                "text-gray-900 placeholder:text-gray-500",
                                                "focus:outline-none focus:ring-0",
                                                "resize-none transition-all duration-200 mobile-readable",
                                                "leading-relaxed"
                                            )}
                                            disabled={isLoading}
                                            onKeyDown={(e) => {
                                                if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
                                                    e.preventDefault();
                                                    handleImprovePrompt();
                                                }
                                            }}
                                        />

                                        {/* ÎßàÎ≤ïÏùò ÏßÄÌå°Ïù¥ Î≤ÑÌäº - Í∞úÏÑ†Îêú Ïä§ÌÉÄÏùº */}
                                        <button
                                            onClick={handleImprovePrompt}
                                            disabled={isLoading || !inputText.trim()}
                                            className={cn(
                                                "absolute right-3 bottom-3 px-4 py-2.5 rounded-lg transition-all duration-200",
                                                "bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700",
                                                "text-white font-medium text-sm",
                                                "disabled:opacity-50 disabled:cursor-not-allowed",
                                                "flex items-center space-x-2 shadow-lg touch-friendly",
                                                "hover:scale-105 transform hover:shadow-xl",
                                                "focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2"
                                            )}
                                            title="Ctrl/Cmd + EnterÎ°úÎèÑ Ïã§Ìñâ Í∞ÄÎä•"
                                            aria-label="ÌîÑÎ°¨ÌîÑÌä∏ Í∞úÏÑ†ÌïòÍ∏∞"
                                        >
                                            {isLoading ? (
                                                <>
                                                    <Loader2 className="w-4 h-4 animate-spin" />
                                                    <span className="hidden sm:inline">Í∞úÏÑ† Ï§ë</span>
                                                </>
                                            ) : (
                                                <>
                                                    <Wand2 className="w-4 h-4" />
                                                    <span className="hidden sm:inline">Í∞úÏÑ†ÌïòÍ∏∞</span>
                                                </>
                                            )}
                                        </button>
                                    </div>

                                    {/* ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ ÌûåÌä∏ */}
                                    <div className="flex items-center justify-between mt-3 text-xs text-gray-500">
                                        <div className="flex items-center space-x-4">
                                            <span>üí° ÏÉòÌîåÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ Îπ†Î•¥Í≤å ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî</span>
                                        </div>
                                        <div className="hidden sm:flex items-center space-x-1">
                                            <kbd className="px-2 py-1 bg-gray-200 rounded text-xs font-mono">Ctrl</kbd>
                                            <span>+</span>
                                            <kbd className="px-2 py-1 bg-gray-200 rounded text-xs font-mono">Enter</kbd>
                                            <span>Î°ú Ïã§Ìñâ</span>
                                        </div>
                                    </div>
                                </div>

                                {/* ÏÉòÌîå ÌîÑÎ°¨ÌîÑÌä∏ ÏÑπÏÖò - Í∞úÏÑ†Îêú Ïä§ÌÉÄÏùº */}
                                <div className="mt-6">
                                    <div className="flex items-center justify-between mb-3">
                                        <h5 className="text-sm font-medium text-gray-700">Îπ†Î•∏ ÏãúÏûë ÏÉòÌîå</h5>
                                        <span className="text-xs text-gray-500">ÌÅ¥Î¶≠ÌïòÏó¨ ÏÇ¨Ïö©</span>
                                    </div>
                                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                                        {samplePrompts.map((prompt, index) => (
                                            <button
                                                key={index}
                                                onClick={() => handleSampleClick(prompt)}
                                                className="text-left p-4 bg-gradient-to-r from-blue-50 to-purple-50 hover:from-blue-100 hover:to-purple-100 rounded-xl border border-blue-200/50 hover:border-blue-300/50 transition-all duration-200 text-sm text-gray-700 hover:text-gray-900 touch-friendly group shadow-sm hover:shadow-md sample-prompt-card"
                                                aria-label={`ÏÉòÌîå ÌîÑÎ°¨ÌîÑÌä∏: ${prompt}`}
                                            >
                                                <div className="flex items-center justify-between">
                                                    <span className="leading-relaxed">{prompt}</span>
                                                    <ArrowRight className="w-4 h-4 opacity-0 group-hover:opacity-100 transition-opacity text-blue-600 flex-shrink-0 ml-2" />
                                                </div>
                                            </button>
                                        ))}
                                    </div>
                                </div>

                                {/* Ï≤¥Ìóò ÌõÑ ÌòúÌÉù ÏïàÎÇ¥ - Í∞úÏÑ†Îêú Ïä§ÌÉÄÏùº */}
                                {hasTriedDemo && (
                                    <div className="mt-6 p-4 bg-gradient-to-r from-green-50 to-blue-50 rounded-xl border border-green-200/50 animate-fade-in">
                                        <div className="flex items-center space-x-2 text-green-700 mb-2">
                                            <CheckCircle className="w-5 h-5" />
                                            <span className="font-medium">Ï≤¥Ìóò ÏôÑÎ£å!</span>
                                        </div>
                                        <p className="text-sm text-gray-700 leading-relaxed">
                                            {improveCount < 2 
                                                ? `${2 - improveCount}Î≤à Îçî Ï≤¥ÌóòÌïòÏãúÎ©¥ Î¨¥Ï†úÌïú Ïù¥Ïö© ÌòúÌÉùÏùÑ Î∞õÏùÑ Ïàò ÏûàÏñ¥Ïöî! üéâ`
                                                : 'üéâ Ï∂ïÌïòÌï©ÎãàÎã§! Ïù¥Ï†ú Î¨¥Ï†úÌïúÏúºÎ°ú Ïù¥Ïö©ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§!'
                                            }
                                        </p>
                                        {improveCount >= 2 && (
                                            <div className="mt-2 text-xs text-green-600">
                                                ‚ú® ÏÇ¨Ï†Ñ Îì±Î°ùÌïòÏãúÎ©¥ Îçî ÎßéÏùÄ ÌòúÌÉùÏùÑ Î∞õÏúºÏã§ Ïàò ÏûàÏñ¥Ïöî!
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </Container>
            </section>

            {/* Pre-Registration Section - Í∞úÏÑ†Îêú Ìèº */}
            {(showPreRegistration || improveCount >= 2) && (
                <section ref={preRegRef} data-section="pre-registration" className="py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-purple-900/50 to-blue-900/50 animate-fade-in">
                    <Container>
                        <div className="max-w-4xl mx-auto">
                            <div className="text-center mb-8">
                                <div className="inline-flex items-center space-x-2 bg-yellow-500/20 text-yellow-300 px-4 py-2 rounded-full text-sm font-medium mb-4">
                                    <Gift className="w-4 h-4" />
                                    <span>ÏñºÎ¶¨Î≤ÑÎìú ÌäπÎ≥Ñ ÌòúÌÉù</span>
                                </div>
                                <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">
                                    Ï≤¥ÌóòÏù¥ ÎßàÏùåÏóê ÎìúÏÖ®ÎÇòÏöî? üöÄ
                                </h2>
                                <p className="text-xl text-blue-100 mb-6">
                                    ÏÇ¨Ï†Ñ Îì±Î°ùÌïòÏãúÎ©¥ <strong className="text-yellow-300">ÌèâÏÉù Î¨¥Î£å</strong> + <strong className="text-yellow-300">ÌîÑÎ¶¨ÎØ∏ÏóÑ Í∏∞Îä•</strong>ÏùÑ Î®ºÏ†Ä Í≤ΩÌóòÌïòÏã§ Ïàò ÏûàÏñ¥Ïöî!
                                </p>
                            </div>

                            {/* ÌòúÌÉù Î¶¨Ïä§Ìä∏ */}
                            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
                                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                                    <div className="text-2xl mb-2">üöÄ</div>
                                    <h3 className="font-semibold text-white mb-1">Ïö∞ÏÑ† Ïï°ÏÑ∏Ïä§</h3>
                                    <p className="text-sm text-blue-200">Ï†ïÏãù Ï∂úÏãú Ï†Ñ Ïö∞ÏÑ† Ïï°ÏÑ∏Ïä§ Í∏∞Ìöå</p>
                                </div>
                                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                                    <div className="text-2xl mb-2">üëë</div>
                                    <h3 className="font-semibold text-white mb-1">ÌîÑÎ¶¨ÎØ∏ÏóÑ Ï≤¥Ìóò</h3>
                                    <p className="text-sm text-blue-200">ÌîÑÎ¶¨ÎØ∏ÏóÑ Í∏∞Îä• 1Í∞úÏõî Î¨¥Î£å Ï≤¥Ìóò</p>
                                </div>
                                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                                    <div className="text-2xl mb-2">üèÜ</div>
                                    <h3 className="font-semibold text-white mb-1">Ï∞ΩÎ¶Ω Î©§Î≤Ñ Î±ÉÏßÄ</h3>
                                    <p className="text-sm text-blue-200">Îì±Î°ùÏûê Ï†ÑÏö© Ï∞ΩÎ¶Ω Î©§Î≤Ñ Î±ÉÏßÄ</p>
                                </div>
                                <div className="bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20">
                                    <div className="text-2xl mb-2">üí°</div>
                                    <h3 className="font-semibold text-white mb-1">Í∏∞Îä• Ï†úÏïà ÌÅ¨Î†àÎîß</h3>
                                    <p className="text-sm text-blue-200">Ï±ÑÌÉù Ïãú Í∏∞Îä• Ï†úÏïà ÌÅ¨Î†àÎîß Î∞è Ïö∞ÏÑ†ÏàúÏúÑ Î∂ÄÏó¨</p>
                                </div>
                            </div>

                            {/* ÏÇ¨Ï†Ñ Îì±Î°ù Ìèº */}
                            <div className="bg-white rounded-2xl p-4">
                                <EnhancedPreRegistrationForm
                                    onSuccess={handleEnhancedRegistrationSuccess}
                                />
                            </div>

                            {/* ÏÇ¨ÌöåÏ†Å Ï¶ùÍ±∞ */}
                            <div className="mt-8 text-center">
                                <div className="flex items-center justify-center space-x-6 text-blue-200 text-sm">
                                    <div className="flex items-center space-x-1">
                                        <Users className="w-4 h-4" />
                                        <span>1,247Î™Ö ÏÇ¨Ï†Ñ Îì±Î°ù</span>
                                    </div>
                                    <div className="flex items-center space-x-1">
                                        <Star className="w-4 h-4 text-yellow-400" />
                                        <span>4.9/5 ÎßåÏ°±ÎèÑ</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Container>
                </section>
            )}

            {/* Í∞ÑÎã®Ìïú Ìë∏ÌÑ∞ */}
            <footer className="py-8 px-4 sm:px-6 lg:px-8 border-t border-white/10">
                <Container>
                    <div className="text-center text-blue-200 text-sm">
                        <p>¬© 2024 Smart Prompt Assistant. Îçî Ïä§ÎßàÌä∏Ìïú AI ÌôúÏö©Ïùò ÏãúÏûë.</p>
                    </div>
                </Container>
            </footer>

            {/* Î™®Î∞îÏùº ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î */}
            <MobileNavBar 
                hasTriedDemo={hasTriedDemo}
                improveCount={improveCount}
                showPreRegistration={showPreRegistration}
                onNavigate={(section) => {
                    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
                    if (section === 'demo') {
                        scrollToDemo();
                    } else if (section === 'pre-registration') {
                        scrollToPreRegistration();
                    }
                }}
            />
        </div>
    );
} 